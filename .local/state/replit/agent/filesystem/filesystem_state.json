{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack e-commerce application for children's fashion called \"Vimishe Fashion Trends\". The application is built with a React frontend and Express.js backend, featuring a comprehensive product catalog, shopping cart functionality, user authentication, and admin management capabilities. The system supports product browsing, cart management, order processing, user profiles, and administrative functions for managing products and categories.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **React with TypeScript**: Modern React application using functional components and hooks\n- **Wouter for Routing**: Lightweight client-side routing solution\n- **TanStack Query**: Server state management for API calls and caching\n- **Zustand**: Client-side state management for cart functionality\n- **Shadcn/ui Components**: Pre-built UI component library with Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **React Hook Form + Zod**: Form handling with schema validation\n\n## Backend Architecture\n- **Express.js**: RESTful API server with middleware-based request processing\n- **TypeScript**: Type-safe server-side development\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL\n- **Session-based Authentication**: Uses express-session with PostgreSQL session store\n- **Replit OAuth Integration**: Authentication via Replit's OpenID Connect provider\n\n## Database Design\n- **PostgreSQL**: Primary database with the following key entities:\n  - Users: User profiles and authentication data\n  - Categories: Hierarchical product categorization\n  - Products: Product catalog with images, pricing, and inventory\n  - Orders & OrderItems: Order management and line items\n  - Cart Items: Shopping cart persistence\n  - Wishlist Items: User wishlist functionality\n  - Reviews: Product review system\n  - Sessions: Session storage for authentication\n\n## API Structure\n- RESTful endpoints organized by resource type\n- Comprehensive product management (CRUD operations)\n- Category management with hierarchical support\n- Shopping cart operations (add, update, remove)\n- Order processing and history\n- User profile management\n- Review system for products\n- Admin-specific endpoints for content management\n\n## Authentication & Authorization\n- **Replit OAuth**: Primary authentication method using OpenID Connect\n- **Session Management**: Server-side sessions stored in PostgreSQL\n- **Role-based Access**: Admin flag for privileged operations\n- **Middleware Protection**: Route-level authentication checks\n\n## State Management Strategy\n- **Server State**: TanStack Query handles API data, caching, and synchronization\n- **Client State**: Zustand manages cart state with persistence\n- **Form State**: React Hook Form manages form inputs and validation\n- **UI State**: React's built-in state for component-level interactions\n\n# External Dependencies\n\n## Authentication Services\n- **Replit OAuth**: Primary authentication provider using OpenID Connect protocol\n- **Passport.js**: Authentication middleware for Express.js\n\n## Database & ORM\n- **Neon Database**: PostgreSQL hosting service via @neondatabase/serverless\n- **Drizzle ORM**: Type-safe database operations and migrations\n- **connect-pg-simple**: PostgreSQL session store for express-session\n\n## Frontend Libraries\n- **Radix UI**: Comprehensive set of low-level UI primitives for accessibility\n- **TanStack Query**: Data fetching and server state management\n- **Zustand**: Lightweight state management solution\n- **React Hook Form**: Performant form library with validation\n- **Wouter**: Minimalist routing library for React\n\n## Development Tools\n- **Vite**: Fast build tool and development server\n- **TypeScript**: Static type checking across the entire stack\n- **Tailwind CSS**: Utility-first CSS framework\n- **ESBuild**: Fast bundling for production builds\n\n## UI Components\n- **Shadcn/ui**: Pre-built component library built on Radix UI\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Utility for creating component variants","size_bytes":4151},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        gradient: {\n          '0%': { backgroundPosition: '0% 50%' },\n          '50%': { backgroundPosition: '100% 50%' },\n          '100%': { backgroundPosition: '0% 50%' },\n        },\n        loading: {\n          '0%': { backgroundPosition: '200% 0' },\n          '100%': { backgroundPosition: '-200% 0' },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"gradient\": \"gradient 3s ease infinite\",\n        \"loading\": \"loading 1.5s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3414},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  // Generate a secure session secret for development if not provided\n  const sessionSecret = process.env.SESSION_SECRET || \n    process.env.REPL_ID + '-dev-session-secret-' + Date.now();\n  \n  return session({\n    secret: sessionSecret,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4434},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport {\n  insertProductSchema,\n  insertCategorySchema,\n  insertOrderSchema,\n  insertOrderItemSchema,\n  insertReviewSchema,\n  insertCartItemSchema,\n  insertWishlistItemSchema,\n  insertSiteSettingSchema,\n  insertSliderSchema,\n  insertCouponSchema,\n  insertPaymentSettingSchema,\n  insertAnalyticsEventSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcryptjs\";\nimport passport from \"passport\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Email/Password Authentication Routes\n  const loginSchema = z.object({\n    email: z.string().email(),\n    password: z.string().min(6),\n  });\n\n  const registerSchema = z.object({\n    email: z.string().email(),\n    password: z.string().min(6),\n    firstName: z.string().min(2),\n    lastName: z.string().min(2),\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 12);\n\n      // Create user\n      const user = await storage.createUser({\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n        authProvider: \"email\",\n      });\n\n      // Set session\n      req.login({ id: user.id, email: user.email }, (err) => {\n        if (err) {\n          console.error(\"Login error:\", err);\n          return res.status(500).json({ message: \"Failed to login after registration\" });\n        }\n        res.status(201).json({ message: \"User registered successfully\", user: { id: user.id, email: user.email, firstName: user.firstName, lastName: user.lastName, isAdmin: user.isAdmin } });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to register user\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      // Get user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.password) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Verify password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n\n      // Set session\n      req.login({ id: user.id, email: user.email }, (err) => {\n        if (err) {\n          console.error(\"Login error:\", err);\n          return res.status(500).json({ message: \"Failed to login\" });\n        }\n        res.json({ message: \"Login successful\", user: { id: user.id, email: user.email, firstName: user.firstName, lastName: user.lastName, isAdmin: user.isAdmin } });\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to login\" });\n    }\n  });\n\n  app.post(\"/api/auth/admin-login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      // Get user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.password || !user.isAdmin) {\n        return res.status(401).json({ message: \"Invalid admin credentials\" });\n      }\n\n      // Verify password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid admin credentials\" });\n      }\n\n      // Set session\n      req.login({ id: user.id, email: user.email, isAdmin: true }, (err) => {\n        if (err) {\n          console.error(\"Admin login error:\", err);\n          return res.status(500).json({ message: \"Failed to login\" });\n        }\n        res.json({ message: \"Admin login successful\", user: { id: user.id, email: user.email, firstName: user.firstName, lastName: user.lastName, isAdmin: user.isAdmin } });\n      });\n    } catch (error) {\n      console.error(\"Admin login error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid input data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to login\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Modified auth user route to work with both OAuth and email/password\n  app.get(\"/api/auth/user\", async (req: any, res) => {\n    try {\n      if (!req.isAuthenticated()) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      let userId;\n      if (req.user.claims) {\n        // OAuth user\n        userId = req.user.claims.sub;\n      } else {\n        // Email/password user\n        userId = req.user.id;\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Categories routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getAllCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  app.get(\"/api/categories/:slug\", async (req, res) => {\n    try {\n      const category = await storage.getCategoryBySlug(req.params.slug);\n      if (!category) {\n        return res.status(404).json({ message: \"Category not found\" });\n      }\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error fetching category:\", error);\n      res.status(500).json({ message: \"Failed to fetch category\" });\n    }\n  });\n\n  app.post(\"/api/categories\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const {\n        categoryId,\n        search,\n        minPrice,\n        maxPrice,\n        isOnSale,\n        isFeatured,\n        limit = \"20\",\n        page = \"1\",\n      } = req.query;\n\n      const limitNum = parseInt(limit as string);\n      const pageNum = parseInt(page as string);\n      const offset = (pageNum - 1) * limitNum;\n\n      const filters = {\n        categoryId: categoryId as string,\n        search: search as string,\n        minPrice: minPrice ? parseFloat(minPrice as string) : undefined,\n        maxPrice: maxPrice ? parseFloat(maxPrice as string) : undefined,\n        isOnSale: isOnSale === \"true\",\n        isFeatured: isFeatured === \"true\",\n        limit: limitNum,\n        offset,\n      };\n\n      const result = await storage.getAllProducts(filters);\n      res.json({\n        products: result.products,\n        total: result.total,\n        page: pageNum,\n        limit: limitNum,\n        totalPages: Math.ceil(result.total / limitNum),\n      });\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ message: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/featured\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 8;\n      const products = await storage.getFeaturedProducts(limit);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching featured products:\", error);\n      res.status(500).json({ message: \"Failed to fetch featured products\" });\n    }\n  });\n\n  app.get(\"/api/products/sale\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 8;\n      const products = await storage.getSaleProducts(limit);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching sale products:\", error);\n      res.status(500).json({ message: \"Failed to fetch sale products\" });\n    }\n  });\n\n  app.get(\"/api/products/:slug\", async (req, res) => {\n    try {\n      const product = await storage.getProductBySlug(req.params.slug);\n      if (!product) {\n        return res.status(404).json({ message: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ message: \"Failed to fetch product\" });\n    }\n  });\n\n  app.post(\"/api/products\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/products/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  // Cart routes\n  app.get(\"/api/cart\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Handle both OAuth and email/password users\n      const userId = req.user.claims ? req.user.claims.sub : req.user.id;\n      const cartItems = await storage.getCartItems(userId);\n      res.json(cartItems);\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n      res.status(500).json({ message: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.post(\"/api/cart\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims ? req.user.claims.sub : req.user.id;\n      const cartItemData = insertCartItemSchema.parse({\n        ...req.body,\n        userId,\n      });\n      const cartItem = await storage.addToCart(cartItemData);\n      res.status(201).json(cartItem);\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      res.status(500).json({ message: \"Failed to add to cart\" });\n    }\n  });\n\n  app.put(\"/api/cart/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { quantity } = req.body;\n      const cartItem = await storage.updateCartItem(req.params.id, quantity);\n      res.json(cartItem);\n    } catch (error) {\n      console.error(\"Error updating cart item:\", error);\n      res.status(500).json({ message: \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      await storage.removeFromCart(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing from cart:\", error);\n      res.status(500).json({ message: \"Failed to remove from cart\" });\n    }\n  });\n\n  app.delete(\"/api/cart\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims ? req.user.claims.sub : req.user.id;\n      await storage.clearCart(userId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error clearing cart:\", error);\n      res.status(500).json({ message: \"Failed to clear cart\" });\n    }\n  });\n\n  // Wishlist routes\n  app.get(\"/api/wishlist\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims ? req.user.claims.sub : req.user.id;\n      const wishlistItems = await storage.getWishlistItems(userId);\n      res.json(wishlistItems);\n    } catch (error) {\n      console.error(\"Error fetching wishlist:\", error);\n      res.status(500).json({ message: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post(\"/api/wishlist\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims ? req.user.claims.sub : req.user.id;\n      const wishlistItemData = insertWishlistItemSchema.parse({\n        ...req.body,\n        userId,\n      });\n      const wishlistItem = await storage.addToWishlist(wishlistItemData);\n      res.status(201).json(wishlistItem);\n    } catch (error) {\n      console.error(\"Error adding to wishlist:\", error);\n      res.status(500).json({ message: \"Failed to add to wishlist\" });\n    }\n  });\n\n  app.delete(\"/api/wishlist/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      await storage.removeFromWishlist(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing from wishlist:\", error);\n      res.status(500).json({ message: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  // Orders routes\n  app.get(\"/api/orders\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims ? req.user.claims.sub : req.user.id;\n      \n      // If admin, get all orders; otherwise get user's orders\n      let orders;\n      if (req.user.isAdmin) {\n        orders = await storage.getAllOrders();\n      } else {\n        orders = await storage.getOrdersByUserId(userId);\n      }\n      \n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const order = await storage.getOrderById(req.params.id);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n\n      const orderItems = await storage.getOrderItems(order.id);\n      res.json({ ...order, items: orderItems });\n    } catch (error) {\n      console.error(\"Error fetching order:\", error);\n      res.status(500).json({ message: \"Failed to fetch order\" });\n    }\n  });\n\n  app.post(\"/api/orders\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims ? req.user.claims.sub : req.user.id;\n      const { items, ...orderData } = req.body;\n\n      const order = await storage.createOrder({\n        ...orderData,\n        userId,\n      });\n\n      // Create order items\n      for (const item of items) {\n        await storage.createOrderItem({\n          orderId: order.id,\n          productId: item.productId,\n          quantity: item.quantity,\n          size: item.size,\n          color: item.color,\n          price: item.price,\n        });\n      }\n\n      // Clear cart after successful order\n      await storage.clearCart(userId);\n\n      res.status(201).json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // Reviews routes\n  app.get(\"/api/products/:productId/reviews\", async (req, res) => {\n    try {\n      const reviews = await storage.getProductReviews(req.params.productId);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post(\"/api/products/:productId/reviews\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims ? req.user.claims.sub : req.user.id;\n      const reviewData = insertReviewSchema.parse({\n        ...req.body,\n        userId,\n        productId: req.params.productId,\n      });\n      const review = await storage.createReview(reviewData);\n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  // Admin middleware - require admin authentication\n  const isAdmin = async (req: any, res: any, next: any) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"Authentication required\" });\n      }\n      \n      const userId = req.user.claims ? req.user.claims.sub : req.user.id;\n      const user = await storage.getUser(userId);\n      \n      if (!user || !user.isAdmin) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      next();\n    } catch (error) {\n      console.error(\"Admin authorization error:\", error);\n      res.status(500).json({ message: \"Authorization check failed\" });\n    }\n  };\n\n  // ADMIN ROUTES\n  \n  // Site Settings Management\n  app.get(\"/api/admin/site-settings\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { category } = req.query;\n      const settings = await storage.getSiteSettings(category as string);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching site settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch site settings\" });\n    }\n  });\n\n  app.get(\"/api/admin/site-settings/:key\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const setting = await storage.getSiteSetting(req.params.key);\n      if (!setting) {\n        return res.status(404).json({ message: \"Setting not found\" });\n      }\n      res.json(setting);\n    } catch (error) {\n      console.error(\"Error fetching site setting:\", error);\n      res.status(500).json({ message: \"Failed to fetch site setting\" });\n    }\n  });\n\n  app.post(\"/api/admin/site-settings\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const settingData = insertSiteSettingSchema.parse(req.body);\n      const setting = await storage.upsertSiteSetting(settingData);\n      res.status(201).json(setting);\n    } catch (error) {\n      console.error(\"Error creating/updating site setting:\", error);\n      res.status(500).json({ message: \"Failed to save site setting\" });\n    }\n  });\n\n  app.delete(\"/api/admin/site-settings/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteSiteSetting(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting site setting:\", error);\n      res.status(500).json({ message: \"Failed to delete site setting\" });\n    }\n  });\n\n  // Slider/Banner Management\n  app.get(\"/api/admin/sliders\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { type, placement } = req.query;\n      const sliders = await storage.getAllSliders(type as string, placement as string);\n      res.json(sliders);\n    } catch (error) {\n      console.error(\"Error fetching sliders:\", error);\n      res.status(500).json({ message: \"Failed to fetch sliders\" });\n    }\n  });\n\n  app.get(\"/api/admin/sliders/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const slider = await storage.getSliderById(req.params.id);\n      if (!slider) {\n        return res.status(404).json({ message: \"Slider not found\" });\n      }\n      res.json(slider);\n    } catch (error) {\n      console.error(\"Error fetching slider:\", error);\n      res.status(500).json({ message: \"Failed to fetch slider\" });\n    }\n  });\n\n  app.post(\"/api/admin/sliders\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const sliderData = insertSliderSchema.parse(req.body);\n      const slider = await storage.createSlider(sliderData);\n      res.status(201).json(slider);\n    } catch (error) {\n      console.error(\"Error creating slider:\", error);\n      res.status(500).json({ message: \"Failed to create slider\" });\n    }\n  });\n\n  app.put(\"/api/admin/sliders/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const sliderData = insertSliderSchema.partial().parse(req.body);\n      const slider = await storage.updateSlider(req.params.id, sliderData);\n      res.json(slider);\n    } catch (error) {\n      console.error(\"Error updating slider:\", error);\n      res.status(500).json({ message: \"Failed to update slider\" });\n    }\n  });\n\n  app.delete(\"/api/admin/sliders/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteSlider(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting slider:\", error);\n      res.status(500).json({ message: \"Failed to delete slider\" });\n    }\n  });\n\n  // Public slider endpoint for frontend\n  app.get(\"/api/sliders\", async (req, res) => {\n    try {\n      const { placement } = req.query;\n      const sliders = await storage.getActiveSliders(placement as string);\n      res.json(sliders);\n    } catch (error) {\n      console.error(\"Error fetching active sliders:\", error);\n      res.status(500).json({ message: \"Failed to fetch sliders\" });\n    }\n  });\n\n  // Public site settings endpoint for frontend\n  app.get(\"/api/site-settings\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      const settings = await storage.getSiteSettings(category as string);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching site settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch site settings\" });\n    }\n  });\n\n  // Coupon Management\n  app.get(\"/api/admin/coupons\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const coupons = await storage.getAllCoupons();\n      res.json(coupons);\n    } catch (error) {\n      console.error(\"Error fetching coupons:\", error);\n      res.status(500).json({ message: \"Failed to fetch coupons\" });\n    }\n  });\n\n  app.get(\"/api/admin/coupons/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const coupon = await storage.getCouponById(req.params.id);\n      if (!coupon) {\n        return res.status(404).json({ message: \"Coupon not found\" });\n      }\n      res.json(coupon);\n    } catch (error) {\n      console.error(\"Error fetching coupon:\", error);\n      res.status(500).json({ message: \"Failed to fetch coupon\" });\n    }\n  });\n\n  app.post(\"/api/admin/coupons\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const couponData = insertCouponSchema.parse(req.body);\n      const coupon = await storage.createCoupon(couponData);\n      res.status(201).json(coupon);\n    } catch (error) {\n      console.error(\"Error creating coupon:\", error);\n      res.status(500).json({ message: \"Failed to create coupon\" });\n    }\n  });\n\n  app.put(\"/api/admin/coupons/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const couponData = insertCouponSchema.partial().parse(req.body);\n      const coupon = await storage.updateCoupon(req.params.id, couponData);\n      res.json(coupon);\n    } catch (error) {\n      console.error(\"Error updating coupon:\", error);\n      res.status(500).json({ message: \"Failed to update coupon\" });\n    }\n  });\n\n  app.delete(\"/api/admin/coupons/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteCoupon(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting coupon:\", error);\n      res.status(500).json({ message: \"Failed to delete coupon\" });\n    }\n  });\n\n  // Coupon validation for frontend\n  app.post(\"/api/coupons/validate\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { code, orderAmount } = req.body;\n      const userId = req.user.claims ? req.user.claims.sub : req.user.id;\n      const validation = await storage.validateCoupon(code, userId, orderAmount);\n      res.json(validation);\n    } catch (error) {\n      console.error(\"Error validating coupon:\", error);\n      res.status(500).json({ message: \"Failed to validate coupon\" });\n    }\n  });\n\n  // Payment Settings Management\n  app.get(\"/api/admin/payment-settings\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const settings = await storage.getAllPaymentSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching payment settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment settings\" });\n    }\n  });\n\n  app.get(\"/api/admin/payment-settings/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const setting = await storage.getPaymentSettingById(req.params.id);\n      if (!setting) {\n        return res.status(404).json({ message: \"Payment setting not found\" });\n      }\n      res.json(setting);\n    } catch (error) {\n      console.error(\"Error fetching payment setting:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment setting\" });\n    }\n  });\n\n  app.post(\"/api/admin/payment-settings\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const settingData = insertPaymentSettingSchema.parse(req.body);\n      const setting = await storage.createPaymentSetting(settingData);\n      res.status(201).json(setting);\n    } catch (error) {\n      console.error(\"Error creating payment setting:\", error);\n      res.status(500).json({ message: \"Failed to create payment setting\" });\n    }\n  });\n\n  app.put(\"/api/admin/payment-settings/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const settingData = insertPaymentSettingSchema.partial().parse(req.body);\n      const setting = await storage.updatePaymentSetting(req.params.id, settingData);\n      res.json(setting);\n    } catch (error) {\n      console.error(\"Error updating payment setting:\", error);\n      res.status(500).json({ message: \"Failed to update payment setting\" });\n    }\n  });\n\n  app.delete(\"/api/admin/payment-settings/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deletePaymentSetting(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting payment setting:\", error);\n      res.status(500).json({ message: \"Failed to delete payment setting\" });\n    }\n  });\n\n  // Public active payment settings for frontend\n  app.get(\"/api/payment-settings\", async (req, res) => {\n    try {\n      const settings = await storage.getActivePaymentSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching active payment settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment settings\" });\n    }\n  });\n\n  // Analytics Management\n  app.post(\"/api/analytics/event\", async (req, res) => {\n    try {\n      const eventData = insertAnalyticsEventSchema.parse(req.body);\n      const event = await storage.recordAnalyticsEvent(eventData);\n      res.status(201).json(event);\n    } catch (error) {\n      console.error(\"Error recording analytics event:\", error);\n      res.status(500).json({ message: \"Failed to record analytics event\" });\n    }\n  });\n\n  app.get(\"/api/admin/analytics/events\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { eventType, userId, productId, startDate, endDate, limit, offset } = req.query;\n      const filters = {\n        eventType: eventType as string,\n        userId: userId as string,\n        productId: productId as string,\n        startDate: startDate ? new Date(startDate as string) : undefined,\n        endDate: endDate ? new Date(endDate as string) : undefined,\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n      };\n      const events = await storage.getAnalyticsEvents(filters);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching analytics events:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics events\" });\n    }\n  });\n\n  app.get(\"/api/admin/analytics/summary\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      const summary = await storage.getAnalyticsSummary(\n        startDate ? new Date(startDate as string) : undefined,\n        endDate ? new Date(endDate as string) : undefined\n      );\n      res.json(summary);\n    } catch (error) {\n      console.error(\"Error fetching analytics summary:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics summary\" });\n    }\n  });\n\n  // Customer Management\n  app.get(\"/api/admin/customers\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { search, limit, offset } = req.query;\n      const filters = {\n        search: search as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n      };\n      const result = await storage.getAllCustomers(filters);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.get(\"/api/admin/customers/:id/analytics\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const analytics = await storage.getCustomerAnalytics(req.params.id);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching customer analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer analytics\" });\n    }\n  });\n\n  // Admin Product Management (enhanced with admin checks)\n  app.post(\"/api/admin/products\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ message: \"Failed to create product\" });\n    }\n  });\n\n  app.put(\"/api/admin/products/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const productData = insertProductSchema.partial().parse(req.body);\n      const product = await storage.updateProduct(req.params.id, productData);\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      res.status(500).json({ message: \"Failed to update product\" });\n    }\n  });\n\n  app.delete(\"/api/admin/products/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteProduct(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      res.status(500).json({ message: \"Failed to delete product\" });\n    }\n  });\n\n  // Admin Category Management\n  app.post(\"/api/admin/categories\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating category:\", error);\n      res.status(500).json({ message: \"Failed to create category\" });\n    }\n  });\n\n  app.put(\"/api/admin/categories/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.partial().parse(req.body);\n      const category = await storage.updateCategory(req.params.id, categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating category:\", error);\n      res.status(500).json({ message: \"Failed to update category\" });\n    }\n  });\n\n  app.delete(\"/api/admin/categories/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteCategory(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ message: \"Failed to delete category\" });\n    }\n  });\n\n  // Admin Order Management\n  app.get(\"/api/admin/orders\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.put(\"/api/admin/orders/:id/status\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error updating order status:\", error);\n      res.status(500).json({ message: \"Failed to update order status\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":33863},"server/storage.ts":{"content":"import {\n  users,\n  categories,\n  products,\n  orders,\n  orderItems,\n  reviews,\n  cartItems,\n  wishlistItems,\n  siteSettings,\n  sliders,\n  coupons,\n  couponUsage,\n  paymentSettings,\n  analyticsEvents,\n  type User,\n  type UpsertUser,\n  type Category,\n  type InsertCategory,\n  type Product,\n  type InsertProduct,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type Review,\n  type InsertReview,\n  type CartItem,\n  type InsertCartItem,\n  type WishlistItem,\n  type InsertWishlistItem,\n  type SiteSetting,\n  type InsertSiteSetting,\n  type Slider,\n  type InsertSlider,\n  type Coupon,\n  type InsertCoupon,\n  type CouponUsage,\n  type InsertCouponUsage,\n  type PaymentSetting,\n  type InsertPaymentSetting,\n  type AnalyticsEvent,\n  type InsertAnalyticsEvent,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, like, and, or, sql, inArray } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Partial<UpsertUser>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Category operations\n  getAllCategories(): Promise<Category[]>;\n  getCategoryBySlug(slug: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category>;\n  deleteCategory(id: string): Promise<void>;\n\n  // Product operations\n  getAllProducts(filters?: {\n    categoryId?: string;\n    search?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    isOnSale?: boolean;\n    isFeatured?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<{ products: Product[]; total: number }>;\n  getProductById(id: string): Promise<Product | undefined>;\n  getProductBySlug(slug: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n  getFeaturedProducts(limit?: number): Promise<Product[]>;\n  getSaleProducts(limit?: number): Promise<Product[]>;\n\n  // Order operations\n  createOrder(order: InsertOrder): Promise<Order>;\n  getOrderById(id: string): Promise<Order | undefined>;\n  getOrdersByUserId(userId: string): Promise<Order[]>;\n  getAllOrders(): Promise<Order[]>;\n  updateOrderStatus(id: string, status: string): Promise<Order>;\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  getOrderItems(orderId: string): Promise<OrderItem[]>;\n\n  // Review operations\n  createReview(review: InsertReview): Promise<Review>;\n  getProductReviews(productId: string): Promise<Review[]>;\n  updateProductRating(productId: string): Promise<void>;\n\n  // Cart operations\n  getCartItems(userId: string): Promise<CartItem[]>;\n  addToCart(cartItem: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number): Promise<CartItem>;\n  removeFromCart(id: string): Promise<void>;\n  clearCart(userId: string): Promise<void>;\n\n  // Wishlist operations\n  getWishlistItems(userId: string): Promise<WishlistItem[]>;\n  addToWishlist(wishlistItem: InsertWishlistItem): Promise<WishlistItem>;\n  removeFromWishlist(id: string): Promise<void>;\n\n  // Admin: Site Settings operations\n  getSiteSettings(category?: string): Promise<SiteSetting[]>;\n  getSiteSetting(key: string): Promise<SiteSetting | undefined>;\n  upsertSiteSetting(setting: InsertSiteSetting): Promise<SiteSetting>;\n  deleteSiteSetting(id: string): Promise<void>;\n\n  // Admin: Slider/Banner operations\n  getAllSliders(type?: string, placement?: string): Promise<Slider[]>;\n  getSliderById(id: string): Promise<Slider | undefined>;\n  createSlider(slider: InsertSlider): Promise<Slider>;\n  updateSlider(id: string, slider: Partial<InsertSlider>): Promise<Slider>;\n  deleteSlider(id: string): Promise<void>;\n  getActiveSliders(placement?: string): Promise<Slider[]>;\n\n  // Admin: Coupon operations\n  getAllCoupons(): Promise<Coupon[]>;\n  getCouponById(id: string): Promise<Coupon | undefined>;\n  getCouponByCode(code: string): Promise<Coupon | undefined>;\n  createCoupon(coupon: InsertCoupon): Promise<Coupon>;\n  updateCoupon(id: string, coupon: Partial<InsertCoupon>): Promise<Coupon>;\n  deleteCoupon(id: string): Promise<void>;\n  validateCoupon(code: string, userId?: string, orderAmount?: number): Promise<{ valid: boolean; coupon?: Coupon; message?: string }>;\n  applyCoupon(couponId: string, userId: string, orderId: string, discountAmount: number): Promise<CouponUsage>;\n\n  // Admin: Payment Settings operations\n  getAllPaymentSettings(): Promise<PaymentSetting[]>;\n  getPaymentSettingById(id: string): Promise<PaymentSetting | undefined>;\n  getActivePaymentSettings(): Promise<PaymentSetting[]>;\n  createPaymentSetting(setting: InsertPaymentSetting): Promise<PaymentSetting>;\n  updatePaymentSetting(id: string, setting: Partial<InsertPaymentSetting>): Promise<PaymentSetting>;\n  deletePaymentSetting(id: string): Promise<void>;\n\n  // Admin: Analytics operations\n  recordAnalyticsEvent(event: InsertAnalyticsEvent): Promise<AnalyticsEvent>;\n  getAnalyticsEvents(filters?: {\n    eventType?: string;\n    userId?: string;\n    productId?: string;\n    startDate?: Date;\n    endDate?: Date;\n    limit?: number;\n    offset?: number;\n  }): Promise<AnalyticsEvent[]>;\n  getAnalyticsSummary(startDate?: Date, endDate?: Date): Promise<{\n    totalPageViews: number;\n    totalProductViews: number;\n    totalPurchases: number;\n    totalRevenue: number;\n    topProducts: Array<{ productId: string; views: number; purchases: number }>;\n    topPages: Array<{ page: string; views: number }>;\n  }>;\n\n  // Admin: Customer management\n  getAllCustomers(filters?: {\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<{ customers: User[]; total: number }>;\n  getCustomerAnalytics(userId: string): Promise<{\n    totalOrders: number;\n    totalSpent: number;\n    lastOrderDate?: Date;\n    favoriteCategories: Array<{ categoryId: string; orderCount: number }>;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: Partial<UpsertUser>): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData as UpsertUser)\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Category operations\n  async getAllCategories(): Promise<Category[]> {\n    return await db\n      .select()\n      .from(categories)\n      .where(eq(categories.isActive, true))\n      .orderBy(asc(categories.name));\n  }\n\n  async getCategoryBySlug(slug: string): Promise<Category | undefined> {\n    const [category] = await db\n      .select()\n      .from(categories)\n      .where(and(eq(categories.slug, slug), eq(categories.isActive, true)));\n    return category;\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db\n      .insert(categories)\n      .values(category)\n      .returning();\n    return newCategory;\n  }\n\n  async updateCategory(id: string, category: Partial<InsertCategory>): Promise<Category> {\n    const [updatedCategory] = await db\n      .update(categories)\n      .set(category)\n      .where(eq(categories.id, id))\n      .returning();\n    return updatedCategory;\n  }\n\n  async deleteCategory(id: string): Promise<void> {\n    await db.update(categories).set({ isActive: false }).where(eq(categories.id, id));\n  }\n\n  // Product operations\n  async getAllProducts(filters?: {\n    categoryId?: string;\n    search?: string;\n    minPrice?: number;\n    maxPrice?: number;\n    isOnSale?: boolean;\n    isFeatured?: boolean;\n    limit?: number;\n    offset?: number;\n  }): Promise<{ products: Product[]; total: number }> {\n    const conditions = [eq(products.isActive, true)];\n\n    if (filters?.categoryId) {\n      conditions.push(eq(products.categoryId, filters.categoryId));\n    }\n\n    if (filters?.search) {\n      conditions.push(\n        or(\n          like(products.name, `%${filters.search}%`),\n          like(products.description, `%${filters.search}%`)\n        )!\n      );\n    }\n\n    if (filters?.minPrice !== undefined) {\n      conditions.push(sql`${products.price} >= ${filters.minPrice}`);\n    }\n\n    if (filters?.maxPrice !== undefined) {\n      conditions.push(sql`${products.price} <= ${filters.maxPrice}`);\n    }\n\n    if (filters?.isOnSale) {\n      conditions.push(eq(products.isOnSale, true));\n    }\n\n    if (filters?.isFeatured) {\n      conditions.push(eq(products.isFeatured, true));\n    }\n\n    const whereClause = and(...conditions);\n\n    const [{ count }] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(products)\n      .where(whereClause);\n\n    const productList = await db\n      .select()\n      .from(products)\n      .where(whereClause)\n      .orderBy(desc(products.createdAt))\n      .limit(filters?.limit || 20)\n      .offset(filters?.offset || 0);\n\n    return {\n      products: productList,\n      total: count,\n    };\n  }\n\n  async getProductById(id: string): Promise<Product | undefined> {\n    const [product] = await db\n      .select()\n      .from(products)\n      .where(and(eq(products.id, id), eq(products.isActive, true)));\n    return product;\n  }\n\n  async getProductBySlug(slug: string): Promise<Product | undefined> {\n    const [product] = await db\n      .select()\n      .from(products)\n      .where(and(eq(products.slug, slug), eq(products.isActive, true)));\n    return product;\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const [newProduct] = await db.insert(products).values(product).returning();\n    return newProduct;\n  }\n\n  async updateProduct(id: string, product: Partial<InsertProduct>): Promise<Product> {\n    const [updatedProduct] = await db\n      .update(products)\n      .set({ ...product, updatedAt: new Date() })\n      .where(eq(products.id, id))\n      .returning();\n    return updatedProduct;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.update(products).set({ isActive: false }).where(eq(products.id, id));\n  }\n\n  async getFeaturedProducts(limit = 8): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.isFeatured, true), eq(products.isActive, true)))\n      .orderBy(desc(products.createdAt))\n      .limit(limit);\n  }\n\n  async getSaleProducts(limit = 8): Promise<Product[]> {\n    return await db\n      .select()\n      .from(products)\n      .where(and(eq(products.isOnSale, true), eq(products.isActive, true)))\n      .orderBy(desc(products.createdAt))\n      .limit(limit);\n  }\n\n  // Order operations\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const [newOrder] = await db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async getOrderById(id: string): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order;\n  }\n\n  async getOrdersByUserId(userId: string): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<Order> {\n    const [updatedOrder] = await db\n      .update(orders)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(orders.id, id))\n      .returning();\n    return updatedOrder;\n  }\n\n  async createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    const [newOrderItem] = await db.insert(orderItems).values(orderItem).returning();\n    return newOrderItem;\n  }\n\n  async getOrderItems(orderId: string): Promise<OrderItem[]> {\n    return await db\n      .select()\n      .from(orderItems)\n      .where(eq(orderItems.orderId, orderId));\n  }\n\n  // Review operations\n  async createReview(review: InsertReview): Promise<Review> {\n    const [newReview] = await db.insert(reviews).values(review).returning();\n    await this.updateProductRating(review.productId);\n    return newReview;\n  }\n\n  async getProductReviews(productId: string): Promise<Review[]> {\n    return await db\n      .select()\n      .from(reviews)\n      .where(eq(reviews.productId, productId))\n      .orderBy(desc(reviews.createdAt));\n  }\n\n  async updateProductRating(productId: string): Promise<void> {\n    const reviewStats = await db\n      .select({\n        avgRating: sql<number>`avg(${reviews.rating})`,\n        count: sql<number>`count(*)`,\n      })\n      .from(reviews)\n      .where(eq(reviews.productId, productId));\n\n    const { avgRating, count } = reviewStats[0];\n\n    await db\n      .update(products)\n      .set({\n        rating: avgRating?.toString() || \"0\",\n        reviewCount: count,\n        updatedAt: new Date(),\n      })\n      .where(eq(products.id, productId));\n  }\n\n  // Cart operations\n  async getCartItems(userId: string): Promise<CartItem[]> {\n    return await db\n      .select()\n      .from(cartItems)\n      .where(eq(cartItems.userId, userId))\n      .orderBy(desc(cartItems.createdAt));\n  }\n\n  async addToCart(cartItem: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists with same product, size, color\n    const [existingItem] = await db\n      .select()\n      .from(cartItems)\n      .where(\n        and(\n          eq(cartItems.userId, cartItem.userId),\n          eq(cartItems.productId, cartItem.productId),\n          cartItem.size ? eq(cartItems.size, cartItem.size) : sql`${cartItems.size} IS NULL`,\n          cartItem.color ? eq(cartItems.color, cartItem.color) : sql`${cartItems.color} IS NULL`\n        )\n      );\n\n    if (existingItem) {\n      // Update quantity\n      const [updatedItem] = await db\n        .update(cartItems)\n        .set({\n          quantity: existingItem.quantity + cartItem.quantity,\n          updatedAt: new Date(),\n        })\n        .where(eq(cartItems.id, existingItem.id))\n        .returning();\n      return updatedItem;\n    }\n\n    // Create new cart item\n    const [newCartItem] = await db.insert(cartItems).values(cartItem).returning();\n    return newCartItem;\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem> {\n    const [updatedItem] = await db\n      .update(cartItems)\n      .set({ quantity, updatedAt: new Date() })\n      .where(eq(cartItems.id, id))\n      .returning();\n    return updatedItem;\n  }\n\n  async removeFromCart(id: string): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.id, id));\n  }\n\n  async clearCart(userId: string): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  // Wishlist operations\n  async getWishlistItems(userId: string): Promise<WishlistItem[]> {\n    return await db\n      .select()\n      .from(wishlistItems)\n      .where(eq(wishlistItems.userId, userId))\n      .orderBy(desc(wishlistItems.createdAt));\n  }\n\n  async addToWishlist(wishlistItem: InsertWishlistItem): Promise<WishlistItem> {\n    const [newWishlistItem] = await db\n      .insert(wishlistItems)\n      .values(wishlistItem)\n      .returning();\n    return newWishlistItem;\n  }\n\n  async removeFromWishlist(id: string): Promise<void> {\n    await db.delete(wishlistItems).where(eq(wishlistItems.id, id));\n  }\n\n  // Admin: Site Settings operations\n  async getSiteSettings(category?: string): Promise<SiteSetting[]> {\n    const conditions = [eq(siteSettings.isActive, true)];\n    if (category) {\n      conditions.push(eq(siteSettings.category, category));\n    }\n    return await db\n      .select()\n      .from(siteSettings)\n      .where(and(...conditions))\n      .orderBy(asc(siteSettings.key));\n  }\n\n  async getSiteSetting(key: string): Promise<SiteSetting | undefined> {\n    const [setting] = await db\n      .select()\n      .from(siteSettings)\n      .where(and(eq(siteSettings.key, key), eq(siteSettings.isActive, true)));\n    return setting;\n  }\n\n  async upsertSiteSetting(setting: InsertSiteSetting): Promise<SiteSetting> {\n    const [upsertedSetting] = await db\n      .insert(siteSettings)\n      .values(setting)\n      .onConflictDoUpdate({\n        target: siteSettings.key,\n        set: {\n          ...setting,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return upsertedSetting;\n  }\n\n  async deleteSiteSetting(id: string): Promise<void> {\n    await db.delete(siteSettings).where(eq(siteSettings.id, id));\n  }\n\n  // Admin: Slider/Banner operations\n  async getAllSliders(type?: string, placement?: string): Promise<Slider[]> {\n    const conditions = [];\n    if (type) conditions.push(eq(sliders.type, type));\n    if (placement) conditions.push(eq(sliders.placement, placement));\n    \n    let query = db.select().from(sliders);\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n    return await query.orderBy(asc(sliders.position), desc(sliders.createdAt));\n  }\n\n  async getSliderById(id: string): Promise<Slider | undefined> {\n    const [slider] = await db.select().from(sliders).where(eq(sliders.id, id));\n    return slider;\n  }\n\n  async createSlider(slider: InsertSlider): Promise<Slider> {\n    const [newSlider] = await db.insert(sliders).values(slider).returning();\n    return newSlider;\n  }\n\n  async updateSlider(id: string, slider: Partial<InsertSlider>): Promise<Slider> {\n    const [updatedSlider] = await db\n      .update(sliders)\n      .set({ ...slider, updatedAt: new Date() })\n      .where(eq(sliders.id, id))\n      .returning();\n    return updatedSlider;\n  }\n\n  async deleteSlider(id: string): Promise<void> {\n    await db.delete(sliders).where(eq(sliders.id, id));\n  }\n\n  async getActiveSliders(placement?: string): Promise<Slider[]> {\n    const now = new Date();\n    const conditions = [\n      eq(sliders.isActive, true),\n      or(sql`${sliders.startDate} IS NULL`, sql`${sliders.startDate} <= ${now}`),\n      or(sql`${sliders.endDate} IS NULL`, sql`${sliders.endDate} >= ${now}`)\n    ];\n    if (placement) {\n      conditions.push(eq(sliders.placement, placement));\n    }\n    return await db\n      .select()\n      .from(sliders)\n      .where(and(...conditions))\n      .orderBy(asc(sliders.position));\n  }\n\n  // Admin: Coupon operations\n  async getAllCoupons(): Promise<Coupon[]> {\n    return await db\n      .select()\n      .from(coupons)\n      .orderBy(desc(coupons.createdAt));\n  }\n\n  async getCouponById(id: string): Promise<Coupon | undefined> {\n    const [coupon] = await db.select().from(coupons).where(eq(coupons.id, id));\n    return coupon;\n  }\n\n  async getCouponByCode(code: string): Promise<Coupon | undefined> {\n    const [coupon] = await db\n      .select()\n      .from(coupons)\n      .where(and(eq(coupons.code, code), eq(coupons.isActive, true)));\n    return coupon;\n  }\n\n  async createCoupon(coupon: InsertCoupon): Promise<Coupon> {\n    const [newCoupon] = await db.insert(coupons).values(coupon).returning();\n    return newCoupon;\n  }\n\n  async updateCoupon(id: string, coupon: Partial<InsertCoupon>): Promise<Coupon> {\n    const [updatedCoupon] = await db\n      .update(coupons)\n      .set({ ...coupon, updatedAt: new Date() })\n      .where(eq(coupons.id, id))\n      .returning();\n    return updatedCoupon;\n  }\n\n  async deleteCoupon(id: string): Promise<void> {\n    await db.delete(coupons).where(eq(coupons.id, id));\n  }\n\n  async validateCoupon(code: string, userId?: string, orderAmount?: number): Promise<{ valid: boolean; coupon?: Coupon; message?: string }> {\n    const coupon = await this.getCouponByCode(code);\n    \n    if (!coupon) {\n      return { valid: false, message: \"Coupon code not found\" };\n    }\n\n    const now = new Date();\n    \n    // Check if coupon is active\n    if (!coupon.isActive) {\n      return { valid: false, message: \"Coupon is no longer active\" };\n    }\n\n    // Check date validity\n    if (coupon.startDate && coupon.startDate > now) {\n      return { valid: false, message: \"Coupon is not yet valid\" };\n    }\n    \n    if (coupon.endDate && coupon.endDate < now) {\n      return { valid: false, message: \"Coupon has expired\" };\n    }\n\n    // Check usage limits\n    if (coupon.usageLimit && (coupon.usageCount || 0) >= coupon.usageLimit) {\n      return { valid: false, message: \"Coupon usage limit exceeded\" };\n    }\n\n    // Check minimum amount\n    if (coupon.minimumAmount && orderAmount && orderAmount < Number(coupon.minimumAmount)) {\n      return { valid: false, message: `Minimum order amount of $${coupon.minimumAmount} required` };\n    }\n\n    // Check user usage limit\n    if (userId && coupon.userLimit) {\n      const userUsageCount = await db\n        .select({ count: sql<number>`count(*)` })\n        .from(couponUsage)\n        .where(and(eq(couponUsage.couponId, coupon.id), eq(couponUsage.userId, userId)));\n      \n      if (userUsageCount[0].count >= coupon.userLimit) {\n        return { valid: false, message: \"You have already used this coupon\" };\n      }\n    }\n\n    return { valid: true, coupon };\n  }\n\n  async applyCoupon(couponId: string, userId: string, orderId: string, discountAmount: number): Promise<CouponUsage> {\n    // Create usage record\n    const [usage] = await db\n      .insert(couponUsage)\n      .values({\n        couponId,\n        userId,\n        orderId,\n        discountAmount: discountAmount.toString(),\n      })\n      .returning();\n\n    // Update coupon usage count\n    await db\n      .update(coupons)\n      .set({\n        usageCount: sql`${coupons.usageCount} + 1`,\n        updatedAt: new Date(),\n      })\n      .where(eq(coupons.id, couponId));\n\n    return usage;\n  }\n\n  // Admin: Payment Settings operations\n  async getAllPaymentSettings(): Promise<PaymentSetting[]> {\n    return await db\n      .select()\n      .from(paymentSettings)\n      .orderBy(asc(paymentSettings.displayName));\n  }\n\n  async getPaymentSettingById(id: string): Promise<PaymentSetting | undefined> {\n    const [setting] = await db\n      .select()\n      .from(paymentSettings)\n      .where(eq(paymentSettings.id, id));\n    return setting;\n  }\n\n  async getActivePaymentSettings(): Promise<PaymentSetting[]> {\n    return await db\n      .select()\n      .from(paymentSettings)\n      .where(eq(paymentSettings.isActive, true))\n      .orderBy(asc(paymentSettings.displayName));\n  }\n\n  async createPaymentSetting(setting: InsertPaymentSetting): Promise<PaymentSetting> {\n    const [newSetting] = await db\n      .insert(paymentSettings)\n      .values(setting)\n      .returning();\n    return newSetting;\n  }\n\n  async updatePaymentSetting(id: string, setting: Partial<InsertPaymentSetting>): Promise<PaymentSetting> {\n    const [updatedSetting] = await db\n      .update(paymentSettings)\n      .set({ ...setting, updatedAt: new Date() })\n      .where(eq(paymentSettings.id, id))\n      .returning();\n    return updatedSetting;\n  }\n\n  async deletePaymentSetting(id: string): Promise<void> {\n    await db.delete(paymentSettings).where(eq(paymentSettings.id, id));\n  }\n\n  // Admin: Analytics operations\n  async recordAnalyticsEvent(event: InsertAnalyticsEvent): Promise<AnalyticsEvent> {\n    const [newEvent] = await db\n      .insert(analyticsEvents)\n      .values(event)\n      .returning();\n    return newEvent;\n  }\n\n  async getAnalyticsEvents(filters?: {\n    eventType?: string;\n    userId?: string;\n    productId?: string;\n    startDate?: Date;\n    endDate?: Date;\n    limit?: number;\n    offset?: number;\n  }): Promise<AnalyticsEvent[]> {\n    const conditions = [];\n\n    if (filters?.eventType) conditions.push(eq(analyticsEvents.eventType, filters.eventType));\n    if (filters?.userId) conditions.push(eq(analyticsEvents.userId, filters.userId));\n    if (filters?.productId) conditions.push(eq(analyticsEvents.productId, filters.productId));\n    if (filters?.startDate) conditions.push(sql`${analyticsEvents.createdAt} >= ${filters.startDate}`);\n    if (filters?.endDate) conditions.push(sql`${analyticsEvents.createdAt} <= ${filters.endDate}`);\n\n    let query = db.select().from(analyticsEvents);\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    query = query.orderBy(desc(analyticsEvents.createdAt));\n\n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n    if (filters?.offset) {\n      query = query.offset(filters.offset);\n    }\n\n    return await query;\n  }\n\n  async getAnalyticsSummary(startDate?: Date, endDate?: Date): Promise<{\n    totalPageViews: number;\n    totalProductViews: number;\n    totalPurchases: number;\n    totalRevenue: number;\n    topProducts: Array<{ productId: string; views: number; purchases: number }>;\n    topPages: Array<{ page: string; views: number }>;\n  }> {\n    const conditions = [];\n    if (startDate) conditions.push(sql`${analyticsEvents.createdAt} >= ${startDate}`);\n    if (endDate) conditions.push(sql`${analyticsEvents.createdAt} <= ${endDate}`);\n\n    const baseCondition = conditions.length > 0 ? and(...conditions) : undefined;\n\n    // Get basic counts\n    const [pageViews] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(analyticsEvents)\n      .where(baseCondition ? and(eq(analyticsEvents.eventType, 'page_view'), baseCondition) : eq(analyticsEvents.eventType, 'page_view'));\n\n    const [productViews] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(analyticsEvents)\n      .where(baseCondition ? and(eq(analyticsEvents.eventType, 'product_view'), baseCondition) : eq(analyticsEvents.eventType, 'product_view'));\n\n    const [purchases] = await db\n      .select({ count: sql<number>`count(*)`, revenue: sql<number>`sum(${analyticsEvents.value})` })\n      .from(analyticsEvents)\n      .where(baseCondition ? and(eq(analyticsEvents.eventType, 'purchase'), baseCondition) : eq(analyticsEvents.eventType, 'purchase'));\n\n    // Get top products\n    const topProducts = await db\n      .select({\n        productId: analyticsEvents.productId,\n        views: sql<number>`count(case when ${analyticsEvents.eventType} = 'product_view' then 1 end)`,\n        purchases: sql<number>`count(case when ${analyticsEvents.eventType} = 'purchase' then 1 end)`,\n      })\n      .from(analyticsEvents)\n      .where(baseCondition ? and(sql`${analyticsEvents.productId} IS NOT NULL`, baseCondition) : sql`${analyticsEvents.productId} IS NOT NULL`)\n      .groupBy(analyticsEvents.productId)\n      .orderBy(desc(sql`count(case when ${analyticsEvents.eventType} = 'product_view' then 1 end)`))\n      .limit(10);\n\n    // Get top pages (simplified - would need metadata parsing in real implementation)\n    const topPages = await db\n      .select({\n        page: sql<string>`coalesce((${analyticsEvents.metadata}->>'page'), 'unknown')`,\n        views: sql<number>`count(*)`,\n      })\n      .from(analyticsEvents)\n      .where(baseCondition ? and(eq(analyticsEvents.eventType, 'page_view'), baseCondition) : eq(analyticsEvents.eventType, 'page_view'))\n      .groupBy(sql`coalesce((${analyticsEvents.metadata}->>'page'), 'unknown')`)\n      .orderBy(desc(sql`count(*)`))\n      .limit(10);\n\n    return {\n      totalPageViews: pageViews.count,\n      totalProductViews: productViews.count,\n      totalPurchases: purchases.count,\n      totalRevenue: purchases.revenue || 0,\n      topProducts: topProducts.filter(p => p.productId) as Array<{ productId: string; views: number; purchases: number }>,\n      topPages,\n    };\n  }\n\n  // Admin: Customer management\n  async getAllCustomers(filters?: {\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<{ customers: User[]; total: number }> {\n    const conditions = [eq(users.isAdmin, false)];\n    \n    if (filters?.search) {\n      conditions.push(\n        or(\n          like(users.email, `%${filters.search}%`),\n          like(users.firstName, `%${filters.search}%`),\n          like(users.lastName, `%${filters.search}%`)\n        )\n      );\n    }\n\n    const [{ count }] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(users)\n      .where(and(...conditions));\n    \n    let query = db.select().from(users).where(and(...conditions));\n    query = query.orderBy(desc(users.createdAt));\n    \n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n    if (filters?.offset) {\n      query = query.offset(filters.offset);\n    }\n\n    const customers = await query;\n\n    return { customers, total: count };\n  }\n\n  async getCustomerAnalytics(userId: string): Promise<{\n    totalOrders: number;\n    totalSpent: number;\n    lastOrderDate?: Date;\n    favoriteCategories: Array<{ categoryId: string; orderCount: number }>;\n  }> {\n    // Get order statistics\n    const [orderStats] = await db\n      .select({\n        totalOrders: sql<number>`count(*)`,\n        totalSpent: sql<number>`sum(${orders.totalAmount})`,\n        lastOrderDate: sql<Date>`max(${orders.createdAt})`,\n      })\n      .from(orders)\n      .where(eq(orders.userId, userId));\n\n    // Get favorite categories\n    const favoriteCategories = await db\n      .select({\n        categoryId: products.categoryId,\n        orderCount: sql<number>`count(distinct ${orders.id})`,\n      })\n      .from(orders)\n      .innerJoin(orderItems, eq(orders.id, orderItems.orderId))\n      .innerJoin(products, eq(orderItems.productId, products.id))\n      .where(eq(orders.userId, userId))\n      .groupBy(products.categoryId)\n      .orderBy(desc(sql`count(distinct ${orders.id})`))\n      .limit(5);\n\n    return {\n      totalOrders: orderStats.totalOrders || 0,\n      totalSpent: orderStats.totalSpent || 0,\n      lastOrderDate: orderStats.lastOrderDate || undefined,\n      favoriteCategories,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":30143},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\"), // For email/password auth\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  authProvider: varchar(\"auth_provider\").default(\"email\"), // 'email' or 'oauth'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  slug: varchar(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\"),\n  parentId: varchar(\"parent_id\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  slug: varchar(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  shortDescription: text(\"short_description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  salePrice: decimal(\"sale_price\", { precision: 10, scale: 2 }),\n  sku: varchar(\"sku\").unique(),\n  stock: integer(\"stock\").default(0),\n  imageUrl: varchar(\"image_url\"),\n  images: text(\"images\").array(),\n  categoryId: varchar(\"category_id\").notNull(),\n  sizes: text(\"sizes\").array(),\n  colors: text(\"colors\").array(),\n  tags: text(\"tags\").array(),\n  isActive: boolean(\"is_active\").default(true),\n  isFeatured: boolean(\"is_featured\").default(false),\n  isOnSale: boolean(\"is_on_sale\").default(false),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, processing, shipped, delivered, cancelled\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  shippingAddress: jsonb(\"shipping_address\").notNull(),\n  billingAddress: jsonb(\"billing_address\"),\n  paymentMethod: varchar(\"payment_method\"),\n  paymentStatus: varchar(\"payment_status\").default(\"pending\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  size: varchar(\"size\"),\n  color: varchar(\"color\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Reviews table\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  rating: integer(\"rating\").notNull(),\n  title: varchar(\"title\"),\n  comment: text(\"comment\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Cart items table (for persistent cart)\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  size: varchar(\"size\"),\n  color: varchar(\"color\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Wishlist items table\nexport const wishlistItems = pgTable(\"wishlist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Site settings table for managing header, footer, menu, etc.\nexport const siteSettings = pgTable(\"site_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: varchar(\"key\").notNull().unique(), // e.g., 'header_logo', 'footer_text', 'site_name'\n  value: text(\"value\"), // JSON string for complex values\n  category: varchar(\"category\").notNull(), // 'header', 'footer', 'menu', 'general'\n  type: varchar(\"type\").notNull().default(\"text\"), // 'text', 'image', 'json', 'boolean'\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Sliders and banners table\nexport const sliders = pgTable(\"sliders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\").notNull(),\n  linkUrl: varchar(\"link_url\"),\n  buttonText: varchar(\"button_text\"),\n  position: integer(\"position\").default(0), // Order of display\n  type: varchar(\"type\").notNull().default(\"slider\"), // 'slider', 'banner', 'popup'\n  placement: varchar(\"placement\").default(\"home\"), // 'home', 'category', 'product'\n  isActive: boolean(\"is_active\").default(true),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Coupons and offers table\nexport const coupons = pgTable(\"coupons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\").notNull().unique(),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  type: varchar(\"type\").notNull(), // 'percentage', 'fixed', 'free_shipping'\n  value: decimal(\"value\", { precision: 10, scale: 2 }).notNull(),\n  minimumAmount: decimal(\"minimum_amount\", { precision: 10, scale: 2 }),\n  maximumDiscount: decimal(\"maximum_discount\", { precision: 10, scale: 2 }),\n  usageLimit: integer(\"usage_limit\"), // Total usage limit\n  usageCount: integer(\"usage_count\").default(0),\n  userLimit: integer(\"user_limit\").default(1), // Per user limit\n  applicableCategories: text(\"applicable_categories\").array(),\n  applicableProducts: text(\"applicable_products\").array(),\n  isActive: boolean(\"is_active\").default(true),\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payment settings table\nexport const paymentSettings = pgTable(\"payment_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  provider: varchar(\"provider\").notNull(), // 'stripe', 'razorpay', 'paypal'\n  displayName: varchar(\"display_name\").notNull(),\n  apiKey: varchar(\"api_key\"), // Encrypted\n  secretKey: varchar(\"secret_key\"), // Encrypted\n  webhookSecret: varchar(\"webhook_secret\"), // Encrypted\n  isActive: boolean(\"is_active\").default(false),\n  isTestMode: boolean(\"is_test_mode\").default(true),\n  configuration: jsonb(\"configuration\"), // Additional provider-specific settings\n  supportedCurrencies: text(\"supported_currencies\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Analytics events table\nexport const analyticsEvents = pgTable(\"analytics_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventType: varchar(\"event_type\").notNull(), // 'page_view', 'product_view', 'purchase', 'add_to_cart'\n  userId: varchar(\"user_id\"),\n  sessionId: varchar(\"session_id\"),\n  productId: varchar(\"product_id\"),\n  categoryId: varchar(\"category_id\"),\n  orderId: varchar(\"order_id\"),\n  value: decimal(\"value\", { precision: 10, scale: 2 }), // For purchase events\n  metadata: jsonb(\"metadata\"), // Additional event data\n  userAgent: text(\"user_agent\"),\n  ipAddress: varchar(\"ip_address\"),\n  referrer: text(\"referrer\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Coupon usage tracking\nexport const couponUsage = pgTable(\"coupon_usage\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  couponId: varchar(\"coupon_id\").notNull(),\n  userId: varchar(\"user_id\"),\n  orderId: varchar(\"order_id\"),\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  orders: many(orders),\n  reviews: many(reviews),\n  cartItems: many(cartItems),\n  wishlistItems: many(wishlistItems),\n}));\n\nexport const categoriesRelations = relations(categories, ({ one, many }) => ({\n  parent: one(categories, {\n    fields: [categories.parentId],\n    references: [categories.id],\n  }),\n  children: many(categories),\n  products: many(products),\n}));\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  orderItems: many(orderItems),\n  reviews: many(reviews),\n  cartItems: many(cartItems),\n  wishlistItems: many(wishlistItems),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  items: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  user: one(users, {\n    fields: [reviews.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [reviews.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const cartItemsRelations = relations(cartItems, ({ one }) => ({\n  user: one(users, {\n    fields: [cartItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [cartItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const wishlistItemsRelations = relations(wishlistItems, ({ one }) => ({\n  user: one(users, {\n    fields: [wishlistItems.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [wishlistItems.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const couponsRelations = relations(coupons, ({ many }) => ({\n  usage: many(couponUsage),\n}));\n\nexport const couponUsageRelations = relations(couponUsage, ({ one }) => ({\n  coupon: one(coupons, {\n    fields: [couponUsage.couponId],\n    references: [coupons.id],\n  }),\n  user: one(users, {\n    fields: [couponUsage.userId],\n    references: [users.id],\n  }),\n  order: one(orders, {\n    fields: [couponUsage.orderId],\n    references: [orders.id],\n  }),\n}));\n\nexport const analyticsEventsRelations = relations(analyticsEvents, ({ one }) => ({\n  user: one(users, {\n    fields: [analyticsEvents.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [analyticsEvents.productId],\n    references: [products.id],\n  }),\n  category: one(categories, {\n    fields: [analyticsEvents.categoryId],\n    references: [categories.id],\n  }),\n  order: one(orders, {\n    fields: [analyticsEvents.orderId],\n    references: [orders.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertWishlistItemSchema = createInsertSchema(wishlistItems).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Admin schemas\nexport const insertSiteSettingSchema = createInsertSchema(siteSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSliderSchema = createInsertSchema(sliders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCouponSchema = createInsertSchema(coupons).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  usageCount: true,\n});\n\nexport const insertPaymentSettingSchema = createInsertSchema(paymentSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAnalyticsEventSchema = createInsertSchema(analyticsEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCouponUsageSchema = createInsertSchema(couponUsage).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type WishlistItem = typeof wishlistItems.$inferSelect;\nexport type InsertWishlistItem = z.infer<typeof insertWishlistItemSchema>;\n\n// Admin types\nexport type SiteSetting = typeof siteSettings.$inferSelect;\nexport type InsertSiteSetting = z.infer<typeof insertSiteSettingSchema>;\nexport type Slider = typeof sliders.$inferSelect;\nexport type InsertSlider = z.infer<typeof insertSliderSchema>;\nexport type Coupon = typeof coupons.$inferSelect;\nexport type InsertCoupon = z.infer<typeof insertCouponSchema>;\nexport type PaymentSetting = typeof paymentSettings.$inferSelect;\nexport type InsertPaymentSetting = z.infer<typeof insertPaymentSettingSchema>;\nexport type AnalyticsEvent = typeof analyticsEvents.$inferSelect;\nexport type InsertAnalyticsEvent = z.infer<typeof insertAnalyticsEventSchema>;\nexport type CouponUsage = typeof couponUsage.$inferSelect;\nexport type InsertCouponUsage = z.infer<typeof insertCouponUsageSchema>;\n","size_bytes":15694},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Products from \"@/pages/products\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport Cart from \"@/pages/cart\";\nimport Checkout from \"@/pages/checkout\";\nimport Profile from \"@/pages/profile\";\nimport Admin from \"@/pages/admin\";\nimport AdminLogin from \"@/pages/admin-login\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport Login from \"@/pages/login\";\nimport Register from \"@/pages/register\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading ? (\n        <Route path=\"*\">\n          <div className=\"min-h-screen flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n              <p className=\"text-gray-600\">Loading...</p>\n            </div>\n          </div>\n        </Route>\n      ) : !isAuthenticated ? (\n        <>\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/admin/login\" component={AdminLogin} />\n          <Route path=\"/\" component={Landing} />\n          <Route component={Login} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/products\" component={Products} />\n          <Route path=\"/products/:slug\" component={ProductDetail} />\n          <Route path=\"/cart\" component={Cart} />\n          <Route path=\"/checkout\" component={Checkout} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n          <Route path=\"/admin/login\" component={AdminLogin} />\n          <Route path=\"/login\" component={Home} />\n          <Route path=\"/register\" component={Home} />\n          <Route component={NotFound} />\n        </>\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2585},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700;800;900&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(220, 13%, 13%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 13%, 13%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 13%, 13%);\n  --primary: hsl(350, 85%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(45, 100%, 50%);\n  --secondary-foreground: hsl(0, 0%, 0%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(200, 100%, 50%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --success: hsl(142, 69%, 58%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(47, 100%, 65%);\n  --warning-foreground: hsl(220, 13%, 13%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Poppins, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(0, 57%, 70%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(175, 52%, 59%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(200, 61%, 64%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --success: hsl(142, 52%, 69%);\n  --success-foreground: hsl(0, 0%, 100%);\n  --warning: hsl(43, 89%, 64%);\n  --warning-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: Poppins, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom styles for the ecommerce platform */\n.hero-gradient {\n  background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);\n}\n\n.notification-bar {\n  background: linear-gradient(45deg, var(--primary), var(--secondary));\n  background-size: 400% 400%;\n  animation: gradient 3s ease infinite;\n}\n\n@keyframes gradient {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n.product-card:hover img {\n  transform: scale(1.05);\n}\n\n.star-rating {\n  color: var(--warning);\n}\n\n.floating-cart {\n  position: fixed;\n  top: 50%;\n  right: -400px;\n  transform: translateY(-50%);\n  transition: right 0.3s ease;\n  z-index: 1000;\n  width: 400px;\n}\n\n.floating-cart.open {\n  right: 0;\n}\n\n.mobile-menu {\n  transform: translateX(-100%);\n  transition: transform 0.3s ease;\n}\n\n.mobile-menu.open {\n  transform: translateX(0);\n}\n\n.modal {\n  display: none;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0,0,0,0.8);\n  z-index: 2000;\n}\n\n.modal.active {\n  display: flex;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n  .floating-cart {\n    width: 100%;\n    right: -100%;\n  }\n}\n\n/* Custom button hover effects */\n.btn-primary {\n  background: var(--primary);\n  color: var(--primary-foreground);\n  transition: all 0.3s ease;\n}\n\n.btn-primary:hover {\n  background: hsl(0, 57%, 65%);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n}\n\n.btn-secondary {\n  background: var(--secondary);\n  color: var(--secondary-foreground);\n  transition: all 0.3s ease;\n}\n\n.btn-secondary:hover {\n  background: hsl(175, 52%, 54%);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n}\n\n/* Loading animations */\n.loading-skeleton {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200% 100%;\n  animation: loading 1.5s infinite;\n}\n\n@keyframes loading {\n  0% {\n    background-position: 200% 0;\n  }\n  100% {\n    background-position: -200% 0;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb {\n  background: var(--primary);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(0, 57%, 65%);\n}\n","size_bytes":7864},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/carousel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface CarouselSlide {\n  id: number;\n  title: string;\n  subtitle?: string;\n  description: string;\n  buttonText: string;\n  buttonLink: string;\n  backgroundImage: string;\n  backgroundColor: string;\n  textColor: string;\n}\n\nconst slides: CarouselSlide[] = [\n  {\n    id: 1,\n    title: \"BUY 2\",\n    subtitle: \"OVERSIZED T-SHIRTS\",\n    description: \"AT ₹999\",\n    buttonText: \"\",\n    buttonLink: \"/products\",\n    backgroundImage: \"https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n    backgroundColor: \"bg-gradient-to-r from-orange-400 to-pink-500\",\n    textColor: \"text-white\"\n  },\n  {\n    id: 2,\n    title: \"Design Your Tee With\",\n    subtitle: \"GOOGLE AI\",\n    description: \"Experience Endless Imagination\",\n    buttonText: \"\",\n    buttonLink: \"/ai-design\",\n    backgroundImage: \"https://images.unsplash.com/photo-1519238263530-99bdd11df2ea?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n    backgroundColor: \"bg-gradient-to-r from-blue-400 to-purple-600\",\n    textColor: \"text-white\"\n  },\n  {\n    id: 3,\n    title: \"BUY 3\",\n    subtitle: \"CLASSIC FIT T-SHIRTS\", \n    description: \"AT ₹999\",\n    buttonText: \"\",\n    buttonLink: \"/products\",\n    backgroundImage: \"https://images.unsplash.com/photo-1441986300917-64674bd600d8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\",\n    backgroundColor: \"bg-gradient-to-r from-pink-400 to-red-500\",\n    textColor: \"text-white\"\n  }\n];\n\nexport default function Carousel() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(true);\n\n  useEffect(() => {\n    if (!isPlaying) return;\n    \n    const interval = setInterval(() => {\n      setCurrentSlide((prev) => (prev + 1) % slides.length);\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [isPlaying]);\n\n  const goToSlide = (index: number) => {\n    setCurrentSlide(index);\n  };\n\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % slides.length);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);\n  };\n\n  return (\n    <div className=\"relative w-full h-64 md:h-80 overflow-hidden rounded-lg\">\n      {/* Slides */}\n      <div \n        className=\"flex transition-transform duration-300 ease-in-out h-full\"\n        style={{ transform: `translateX(-${currentSlide * 100}%)` }}\n      >\n        {slides.map((slide) => (\n          <div\n            key={slide.id}\n            className={`min-w-full h-full ${slide.backgroundColor} relative cursor-pointer`}\n            onClick={() => window.location.href = slide.buttonLink}\n          >\n            <div className=\"absolute inset-0 flex items-center justify-between px-8 md:px-16\">\n              <div className={`${slide.textColor} z-10`}>\n                <h2 className=\"text-2xl md:text-4xl font-black mb-1\">\n                  {slide.title}\n                </h2>\n                {slide.subtitle && (\n                  <h3 className=\"text-xl md:text-3xl font-black mb-2\">\n                    {slide.subtitle}\n                  </h3>\n                )}\n                <p className=\"text-lg md:text-2xl font-bold\">\n                  {slide.description}\n                </p>\n              </div>\n              <div className=\"hidden md:block relative z-10\">\n                <img \n                  src={slide.backgroundImage}\n                  alt=\"Product showcase\"\n                  className=\"w-48 h-32 md:w-64 md:h-40 object-cover rounded-lg\"\n                />\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Navigation Arrows */}\n      <button\n        onClick={prevSlide}\n        className=\"absolute left-2 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-60 hover:bg-opacity-90 p-1.5 rounded-full transition-all z-20\"\n        data-testid=\"carousel-prev\"\n      >\n        <i className=\"fas fa-chevron-left text-gray-800 text-sm\"></i>\n      </button>\n      \n      <button\n        onClick={nextSlide}\n        className=\"absolute right-2 top-1/2 transform -translate-y-1/2 bg-white bg-opacity-60 hover:bg-opacity-90 p-1.5 rounded-full transition-all z-20\"\n        data-testid=\"carousel-next\"\n      >\n        <i className=\"fas fa-chevron-right text-gray-800 text-sm\"></i>\n      </button>\n\n      {/* Dots Indicator */}\n      <div className=\"absolute bottom-3 left-1/2 transform -translate-x-1/2 flex space-x-1.5\">\n        {slides.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => goToSlide(index)}\n            className={`w-2 h-2 rounded-full transition-all ${\n              currentSlide === index\n                ? \"bg-white\"\n                : \"bg-white bg-opacity-40 hover:bg-opacity-70\"\n            }`}\n            data-testid={`carousel-dot-${index}`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":4929},"client/src/components/cart-sidebar.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { CartItem as DBCartItem } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useCartStore } from \"@/store/cart\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useLocation } from \"wouter\";\n\nexport default function CartSidebar() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { isOpen, setOpen } = useCartStore();\n  const [, setLocation] = useLocation();\n\n  const { data: cartItems = [], isLoading } = useQuery<DBCartItem[]>({\n    queryKey: [\"/api/cart\"],\n    retry: false,\n    enabled: !!user,\n  });\n\n  const updateCartMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: string; quantity: number }) => {\n      await apiRequest(\"PUT\", `/api/cart/${id}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update cart item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/cart/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateQuantity = (id: string, quantity: number) => {\n    if (quantity < 1) return;\n    updateCartMutation.mutate({ id, quantity });\n  };\n\n  const handleRemoveItem = (id: string) => {\n    removeFromCartMutation.mutate(id);\n  };\n\n  const handleViewCart = () => {\n    setOpen(false);\n    setLocation(\"/cart\");\n  };\n\n  const handleCheckout = () => {\n    setOpen(false);\n    setLocation(\"/checkout\");\n  };\n\n  const subtotal = cartItems.reduce((total: number, item: any) => {\n    return total + (parseFloat(item.product?.salePrice || item.product?.price || \"0\") * item.quantity);\n  }, 0);\n\n  const shippingThreshold = 1000;\n  const isEligibleForFreeShipping = subtotal >= shippingThreshold;\n  const remainingForFreeShipping = shippingThreshold - subtotal;\n\n  if (!user) return null;\n\n  return (\n    <>\n      {/* Overlay */}\n      {isOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40\"\n          onClick={() => setOpen(false)}\n          data-testid=\"cart-overlay\"\n        />\n      )}\n\n      {/* Cart Sidebar */}\n      <div className={`floating-cart bg-white shadow-2xl rounded-l-2xl ${isOpen ? 'open' : ''}`} data-testid=\"cart-sidebar\">\n        {/* Header */}\n        <div className=\"p-6 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\" data-testid=\"text-cart-title\">Shopping Cart</h3>\n            <button \n              onClick={() => setOpen(false)} \n              className=\"text-gray-500 hover:text-gray-700\"\n              data-testid=\"button-close-cart\"\n            >\n              <i className=\"fas fa-times\"></i>\n            </button>\n          </div>\n          \n          {/* Free Shipping Progress */}\n          {!isEligibleForFreeShipping && remainingForFreeShipping > 0 && (\n            <div className=\"mt-4\">\n              <div className=\"text-sm text-gray-600 mb-2\" data-testid=\"text-free-shipping-message\">\n                You are ₹{remainingForFreeShipping.toFixed(0)} away from free shipping!\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div \n                  className=\"bg-gradient-to-r from-primary to-secondary h-2 rounded-full transition-all duration-300\" \n                  style={{ width: `${Math.min(100, (subtotal / shippingThreshold) * 100)}%` }}\n                  data-testid=\"progress-free-shipping\"\n                />\n              </div>\n            </div>\n          )}\n          \n          {isEligibleForFreeShipping && (\n            <div className=\"mt-2 text-sm text-success font-medium\" data-testid=\"text-free-shipping-eligible\">\n              <i className=\"fas fa-check-circle mr-1\"></i>\n              You qualify for free shipping!\n            </div>\n          )}\n        </div>\n        \n        {/* Cart Items */}\n        <div className=\"p-6 max-h-96 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 2 }).map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-gray-200 rounded-lg\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-6 bg-gray-200 rounded w-20\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : cartItems.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <i className=\"fas fa-shopping-cart text-4xl text-gray-300 mb-4\"></i>\n              <p className=\"text-gray-500 mb-4\" data-testid=\"text-empty-cart\">Your cart is empty</p>\n              <Button onClick={() => setOpen(false)} data-testid=\"button-continue-shopping\">\n                Continue Shopping\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {cartItems.map((item: any) => (\n                <div key={item.id} className=\"flex items-center space-x-4\" data-testid={`cart-item-${item.id}`}>\n                  <img \n                    src={item.product?.imageUrl || \"https://images.unsplash.com/photo-1519238263530-99bdd11df2ea?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"}\n                    alt={item.product?.name}\n                    className=\"w-16 h-16 object-cover rounded-lg\"\n                    data-testid={`img-cart-item-${item.id}`}\n                  />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-sm\" data-testid={`text-item-name-${item.id}`}>\n                      {item.product?.name}\n                    </h4>\n                    <div className=\"text-xs text-gray-500\">\n                      {item.size && <span data-testid={`text-item-size-${item.id}`}>Size: {item.size}</span>}\n                      {item.color && <span className=\"ml-2\" data-testid={`text-item-color-${item.id}`}>Color: {item.color}</span>}\n                    </div>\n                    <div className=\"flex items-center justify-between mt-1\">\n                      <span className=\"text-primary font-semibold\" data-testid={`text-item-price-${item.id}`}>\n                        ₹{item.product?.salePrice || item.product?.price}\n                      </span>\n                      <div className=\"flex items-center space-x-2\">\n                        <button \n                          className=\"w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-xs\"\n                          onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}\n                          disabled={updateCartMutation.isPending}\n                          data-testid={`button-decrease-${item.id}`}\n                        >\n                          -\n                        </button>\n                        <span className=\"text-sm\" data-testid={`text-quantity-${item.id}`}>{item.quantity}</span>\n                        <button \n                          className=\"w-6 h-6 rounded-full bg-gray-200 flex items-center justify-center text-xs\"\n                          onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}\n                          disabled={updateCartMutation.isPending}\n                          data-testid={`button-increase-${item.id}`}\n                        >\n                          +\n                        </button>\n                        <button \n                          className=\"text-red-500 text-xs ml-2\"\n                          onClick={() => handleRemoveItem(item.id)}\n                          disabled={removeFromCartMutation.isPending}\n                          data-testid={`button-remove-${item.id}`}\n                        >\n                          <i className=\"fas fa-trash\"></i>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        \n        {/* Cart Footer */}\n        {cartItems.length > 0 && (\n          <div className=\"p-6 border-t\">\n            <div className=\"flex justify-between mb-4\">\n              <span className=\"font-semibold\">Total:</span>\n              <span className=\"font-bold text-xl text-primary\" data-testid=\"text-cart-total\">\n                ₹{subtotal.toFixed(2)}\n              </span>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Button \n                onClick={handleCheckout}\n                className=\"w-full bg-primary text-white py-3 rounded-full font-semibold hover:bg-primary/90\"\n                data-testid=\"button-checkout\"\n              >\n                Checkout\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={handleViewCart}\n                className=\"w-full py-2 rounded-full font-medium\"\n                data-testid=\"button-view-cart\"\n              >\n                View Cart\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","size_bytes":10555},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  const handleNewsletterSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Newsletter subscription would be implemented here\n  };\n\n  return (\n    <footer className=\"bg-gray-800 text-white py-12 px-4\">\n      <div className=\"container mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand Info */}\n          <div>\n            <div className=\"flex items-center space-x-2 mb-6\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-bold text-lg\">V</span>\n              </div>\n              <h3 className=\"text-xl font-bold\" data-testid=\"text-footer-brand\">Vimishe Fashion Trends</h3>\n            </div>\n            <p className=\"text-gray-300 mb-4\" data-testid=\"text-footer-description\">\n              Premium children's clothing with comfort, style, and quality you can trust.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-gray-300 hover:text-primary\" data-testid=\"link-facebook\">\n                <i className=\"fab fa-facebook\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-primary\" data-testid=\"link-instagram\">\n                <i className=\"fab fa-instagram\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-primary\" data-testid=\"link-twitter\">\n                <i className=\"fab fa-twitter\"></i>\n              </a>\n              <a href=\"#\" className=\"text-gray-300 hover:text-primary\" data-testid=\"link-pinterest\">\n                <i className=\"fab fa-pinterest\"></i>\n              </a>\n            </div>\n          </div>\n          \n          {/* Shop Links */}\n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\" data-testid=\"text-shop-title\">Shop</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/products?categoryId=casual\" className=\"text-gray-300 hover:text-white\" data-testid=\"link-casual-wear\">\n                  Casual Wear\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/products?categoryId=formal\" className=\"text-gray-300 hover:text-white\" data-testid=\"link-formal-wear\">\n                  Formal Wear\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/products?categoryId=baby\" className=\"text-gray-300 hover:text-white\" data-testid=\"link-baby-collection\">\n                  Baby Collection\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/products?categoryId=accessories\" className=\"text-gray-300 hover:text-white\" data-testid=\"link-accessories\">\n                  Accessories\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/products?isOnSale=true\" className=\"text-gray-300 hover:text-white\" data-testid=\"link-sale-items\">\n                  Sale Items\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Customer Care */}\n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\" data-testid=\"text-customer-care-title\">Customer Care</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-white\" data-testid=\"link-contact-us\">\n                  Contact Us\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-white\" data-testid=\"link-size-guide\">\n                  Size Guide\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-white\" data-testid=\"link-shipping-info\">\n                  Shipping Info\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-white\" data-testid=\"link-returns\">\n                  Returns\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-300 hover:text-white\" data-testid=\"link-faq\">\n                  FAQ\n                </a>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Newsletter */}\n          <div>\n            <h4 className=\"font-semibold text-lg mb-4\" data-testid=\"text-newsletter-title\">Newsletter</h4>\n            <p className=\"text-gray-300 mb-4\" data-testid=\"text-newsletter-description\">\n              Subscribe for updates and exclusive offers\n            </p>\n            <form onSubmit={handleNewsletterSubmit} className=\"flex\">\n              <input \n                type=\"email\" \n                placeholder=\"Your email\" \n                className=\"flex-1 px-4 py-2 rounded-l-full text-gray-800\"\n                data-testid=\"input-newsletter-email\"\n              />\n              <button \n                type=\"submit\"\n                className=\"bg-primary px-6 py-2 rounded-r-full hover:bg-primary/90\"\n                data-testid=\"button-subscribe\"\n              >\n                Subscribe\n              </button>\n            </form>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-gray-700 mt-8 pt-8 text-center\">\n          <p className=\"text-gray-300\" data-testid=\"text-copyright\">\n            &copy; 2024 Vimishe Fashion Trends. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5569},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useCartStore } from \"@/store/cart\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Category } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nexport default function Header() {\n  const { user, isAuthenticated } = useAuth();\n  const { toggleCart, getItemCount } = useCartStore();\n  const isMobile = useIsMobile();\n  const [location] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const cartItemCount = getItemCount();\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      window.location.href = `/products?search=${encodeURIComponent(searchQuery)}`;\n    }\n  };\n\n  const toggleMobileMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  return (\n    <>\n\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between py-4\">\n            {/* Mobile Menu Button */}\n            <button \n              className=\"lg:hidden text-gray-600\"\n              onClick={toggleMobileMenu}\n              data-testid=\"button-mobile-menu\"\n            >\n              <i className=\"fas fa-bars text-xl\"></i>\n            </button>\n\n            {/* Logo */}\n            <Link href=\"/\" className=\"flex items-center space-x-3\" data-testid=\"link-home\">\n              <img \n                src=\"https://vimishefashiontrends.com/wp-content/uploads/2025/07/WhatsApp-Image-2025-07-02-at-01.02.48_f7a00154.jpg\" \n                alt=\"Vimishe Fashion Trends\" \n                className=\"h-12 w-auto object-contain\"\n              />\n            </Link>\n\n            {/* Desktop Navigation */}\n            <nav className=\"hidden lg:flex items-center space-x-8\">\n              <Link \n                href=\"/\" \n                className=\"text-gray-800 hover:text-black font-semibold transition-colors uppercase text-sm tracking-wide\"\n                data-testid=\"link-men\"\n              >\n                MEN\n              </Link>\n              <Link \n                href=\"/products\" \n                className=\"text-gray-800 hover:text-black font-semibold transition-colors uppercase text-sm tracking-wide\"\n                data-testid=\"link-women\"\n              >\n                WOMEN\n              </Link>\n              <Link \n                href=\"/products\" \n                className=\"text-gray-800 hover:text-black font-semibold transition-colors uppercase text-sm tracking-wide\"\n                data-testid=\"link-mobile-covers\"\n              >\n                MOBILE COVERS\n              </Link>\n            </nav>\n\n            {/* Header Actions */}\n            <div className=\"flex items-center space-x-4\">\n              {/* Search */}\n              {!isMobile && (\n                <form onSubmit={handleSearch} className=\"flex items-center\">\n                  <div className=\"relative\">\n                    <Input\n                      type=\"text\"\n                      placeholder=\"Search by products\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      className=\"pl-4 pr-10 py-2 border border-gray-300 rounded focus:ring-1 focus:ring-gray-400 focus:border-gray-400 outline-none w-72 text-sm bg-gray-50\"\n                      data-testid=\"input-search\"\n                    />\n                    <i className=\"fas fa-search absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400\"></i>\n                  </div>\n                </form>\n              )}\n              \n              {/* Right Side Actions */}\n              <div className=\"flex items-center space-x-6\">\n                {isAuthenticated ? (\n                  <div className=\"relative group\">\n                    <button className=\"text-sm font-semibold text-gray-800 hover:text-black uppercase tracking-wide\" data-testid=\"button-account\">\n                      {user?.firstName || \"ACCOUNT\"}\n                    </button>\n                    <div className=\"absolute right-0 top-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg py-2 w-48 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50\">\n                      <Link href=\"/profile\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50\" data-testid=\"link-profile\">\n                        My Profile\n                      </Link>\n                      <Link href=\"/orders\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50\" data-testid=\"link-orders\">\n                        My Orders\n                      </Link>\n                      {user?.isAdmin && (\n                        <Link href=\"/admin\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50\" data-testid=\"link-admin\">\n                          Admin Panel\n                        </Link>\n                      )}\n                      <hr className=\"my-1\" />\n                      <button \n                        onClick={async () => {\n                          try {\n                            await fetch(\"/api/auth/logout\", { method: \"POST\" });\n                            window.location.href = \"/login\";\n                          } catch (error) {\n                            console.error(\"Logout error:\", error);\n                          }\n                        }}\n                        className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50\"\n                        data-testid=\"button-logout\"\n                      >\n                        Sign Out\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <Link \n                    href=\"/login\"\n                    className=\"text-sm font-semibold text-gray-800 hover:text-black uppercase tracking-wide\"\n                    data-testid=\"button-login\"\n                  >\n                    LOGIN\n                  </Link>\n                )}\n                <button className=\"hover:text-black transition-colors\" data-testid=\"button-wishlist\">\n                  <i className=\"far fa-heart text-gray-700 text-xl\"></i>\n                </button>\n                <button \n                  className=\"hover:text-black transition-colors relative\"\n                  onClick={toggleCart}\n                  data-testid=\"button-bag\"\n                >\n                  <i className=\"fas fa-shopping-bag text-gray-700 text-xl\"></i>\n                  {cartItemCount > 0 && (\n                    <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-bold\">\n                      {cartItemCount}\n                    </span>\n                  )}\n                </button>\n              </div>\n\n            </div>\n          </div>\n        </div>\n        \n        {/* Secondary Navigation */}\n        <div className=\"bg-gray-50 border-b border-gray-200\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"flex items-center justify-center space-x-8 py-3\">\n              <Link href=\"/products\" className=\"text-sm font-medium text-gray-700 hover:text-black transition-colors\" data-testid=\"link-shop-now\">\n                SHOP NOW\n              </Link>\n              <Link href=\"/live\" className=\"text-sm font-medium text-gray-700 hover:text-black transition-colors\" data-testid=\"link-live-now\">\n                LIVE NOW\n              </Link>\n              <Link href=\"/plus-size\" className=\"text-sm font-medium text-gray-700 hover:text-black transition-colors\" data-testid=\"link-plus-size\">\n                PLUS SIZE\n              </Link>\n              <Link href=\"/bewakoof-air\" className=\"text-sm font-medium text-gray-700 hover:text-black transition-colors\" data-testid=\"link-bewakoof-air\">\n                BWKF X GOOGLE AI\n              </Link>\n              <Link href=\"/accessories\" className=\"text-sm font-medium text-gray-700 hover:text-black transition-colors\" data-testid=\"link-accessories\">\n                ACCESSORIES\n              </Link>\n              <Link href=\"/official-merch\" className=\"text-sm font-medium text-gray-700 hover:text-black transition-colors\" data-testid=\"link-official-merch\">\n                OFFICIAL MERCH\n              </Link>\n              <Link href=\"/sneakers\" className=\"text-sm font-medium text-gray-700 hover:text-black transition-colors\" data-testid=\"link-sneakers\">\n                SNEAKERS\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Mobile Menu */}\n      <div className={`mobile-menu fixed inset-0 bg-white z-40 lg:hidden ${isMenuOpen ? 'open' : ''}`}>\n        <div className=\"p-4\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-xl font-bold text-gray-800\">Menu</h2>\n            <button onClick={toggleMobileMenu} data-testid=\"button-close-menu\">\n              <i className=\"fas fa-times text-xl text-gray-600\"></i>\n            </button>\n          </div>\n          \n          {/* Mobile Search */}\n          <form onSubmit={handleSearch} className=\"mb-6\">\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search products...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 pr-4 py-2 w-full\"\n                data-testid=\"input-search-mobile\"\n              />\n              <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"></i>\n            </div>\n          </form>\n\n          <nav className=\"space-y-4\">\n            <Link href=\"/\" className=\"block text-gray-700 text-lg py-2\" onClick={toggleMobileMenu} data-testid=\"link-home-mobile\">\n              Home\n            </Link>\n            <Link href=\"/products\" className=\"block text-gray-700 text-lg py-2\" onClick={toggleMobileMenu} data-testid=\"link-products-mobile\">\n              All Products\n            </Link>\n            {categories.map((category: any) => (\n              <Link\n                key={category.id}\n                href={`/products?categoryId=${category.id}`}\n                className=\"block text-gray-600 pl-4 py-2\"\n                onClick={toggleMobileMenu}\n                data-testid={`link-category-mobile-${category.slug}`}\n              >\n                {category.name}\n              </Link>\n            ))}\n            {isAuthenticated ? (\n              <>\n                <Link href=\"/profile\" className=\"block text-gray-700 text-lg py-2\" onClick={toggleMobileMenu} data-testid=\"link-profile-mobile\">\n                  Profile\n                </Link>\n                {user?.isAdmin && (\n                  <Link href=\"/admin\" className=\"block text-gray-700 text-lg py-2\" onClick={toggleMobileMenu} data-testid=\"link-admin-mobile\">\n                    Admin\n                  </Link>\n                )}\n                <button \n                  onClick={() => window.location.href = \"/api/logout\"}\n                  className=\"block text-gray-700 text-lg py-2 w-full text-left\"\n                  data-testid=\"button-logout-mobile\"\n                >\n                  Logout\n                </button>\n              </>\n            ) : (\n              <Link \n                href=\"/login\"\n                className=\"block text-gray-700 text-lg py-2 w-full text-left\"\n                onClick={toggleMobileMenu}\n                data-testid=\"button-login-mobile\"\n              >\n                Login\n              </Link>\n            )}\n          </nav>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":12147},"client/src/components/product-card.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport QuickViewModal from \"./quick-view-modal\";\n\ninterface Product {\n  id: string;\n  name: string;\n  slug: string;\n  price: string;\n  salePrice?: string;\n  imageUrl: string;\n  rating?: string;\n  reviewCount?: number;\n  sizes?: string[];\n  isOnSale?: boolean;\n  isFeatured?: boolean;\n}\n\ninterface ProductCardProps {\n  product: Product;\n  showLogin?: () => void;\n}\n\nexport default function ProductCard({ product, showLogin }: ProductCardProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showQuickView, setShowQuickView] = useState(false);\n\n  const addToCartMutation = useMutation({\n    mutationFn: async (cartData: any) => {\n      await apiRequest(\"POST\", \"/api/cart\", cartData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Added to Cart\",\n        description: \"Product has been added to your cart!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addToWishlistMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest(\"POST\", \"/api/wishlist\", { productId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Added to Wishlist\",\n        description: \"Product has been added to your wishlist!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to wishlist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.preventDefault();\n    \n    if (!user) {\n      if (showLogin) {\n        showLogin();\n      } else {\n        toast({\n          title: \"Please Login\",\n          description: \"You need to login to add items to cart\",\n          variant: \"destructive\",\n        });\n      }\n      return;\n    }\n\n    addToCartMutation.mutate({\n      productId: product.id,\n      quantity: 1,\n    });\n  };\n\n  const handleAddToWishlist = (e: React.MouseEvent) => {\n    e.preventDefault();\n    \n    if (!user) {\n      if (showLogin) {\n        showLogin();\n      } else {\n        toast({\n          title: \"Please Login\",\n          description: \"You need to login to add items to wishlist\",\n          variant: \"destructive\",\n        });\n      }\n      return;\n    }\n\n    addToWishlistMutation.mutate(product.id);\n  };\n\n  const handleQuickView = (e: React.MouseEvent) => {\n    e.preventDefault();\n    setShowQuickView(true);\n  };\n\n  const displayPrice = product.salePrice || product.price;\n  const originalPrice = product.salePrice ? product.price : null;\n  const discountPercent = originalPrice \n    ? Math.round(((parseFloat(originalPrice) - parseFloat(displayPrice)) / parseFloat(originalPrice)) * 100)\n    : 0;\n\n  return (\n    <>\n      <div className=\"product-card bg-white rounded-lg overflow-hidden group cursor-pointer hover:shadow-lg transition-all duration-300\" data-testid={`product-card-${product.id}`}>\n        <Link href={`/products/${product.slug}`}>\n          <div className=\"relative\">\n            <img \n              src={product.imageUrl || \"https://images.unsplash.com/photo-1519238263530-99bdd11df2ea?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"} \n              alt={product.name}\n              className=\"w-full h-72 object-cover group-hover:scale-105 transition-transform duration-300\"\n              data-testid={`img-product-${product.id}`}\n            />\n            \n            {/* Rating Badge */}\n            <div className=\"absolute top-3 left-3\">\n              <span className=\"bg-white px-2 py-1 rounded text-xs font-bold shadow-md\">\n                {product.rating || \"4.5\"} ★\n              </span>\n            </div>\n            \n            {/* Sale Badge */}\n            {product.isOnSale && discountPercent > 0 && (\n              <div className=\"absolute top-3 right-3\">\n                <span className=\"bg-red-500 text-white px-2 py-1 rounded text-xs font-bold\" data-testid={`badge-sale-${product.id}`}>\n                  {discountPercent}% OFF\n                </span>\n              </div>\n            )}\n            \n            {/* Wishlist Button */}\n            <div className=\"absolute top-3 right-3 opacity-0 group-hover:opacity-100 transition-opacity\">\n              <Button\n                size=\"sm\"\n                variant=\"secondary\"\n                className=\"p-2 bg-white shadow-md hover:shadow-lg rounded-full\"\n                onClick={handleAddToWishlist}\n                disabled={addToWishlistMutation.isPending}\n                data-testid={`button-wishlist-${product.id}`}\n              >\n                <i className=\"fas fa-heart text-gray-600 hover:text-red-500 transition-colors\"></i>\n              </Button>\n            </div>\n          </div>\n        </Link>\n\n        <div className=\"p-4\">\n          <Link href={`/products/${product.slug}`}>\n            <h3 className=\"font-medium text-gray-800 mb-1 text-sm line-clamp-2 hover:text-primary transition-colors\" data-testid={`text-product-name-${product.id}`}>\n              {product.name}\n            </h3>\n          </Link>\n          \n          {/* Brand or Category */}\n          <p className=\"text-gray-500 text-xs mb-2\">Bewakoof®</p>\n\n          {/* Price */}\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <span className=\"text-lg font-bold text-gray-900\" data-testid={`text-price-${product.id}`}>\n              ₹{displayPrice}\n            </span>\n            {originalPrice && (\n              <>\n                <span className=\"text-gray-500 line-through text-sm\" data-testid={`text-original-price-${product.id}`}>\n                  ₹{originalPrice}\n                </span>\n                <span className=\"text-green-600 text-sm font-medium\">\n                  {discountPercent}% OFF\n                </span>\n              </>\n            )}\n          </div>\n\n          {/* Size Info */}\n          {product.sizes && product.sizes.length > 0 && (\n            <div className=\"mb-3\">\n              <p className=\"text-xs text-gray-500\" data-testid={`text-sizes-${product.id}`}>\n                {product.sizes.slice(0, 3).join(\", \")}...\n              </p>\n            </div>\n          )}\n\n          {/* Add to Cart Button */}\n          <Button\n            onClick={handleAddToCart}\n            disabled={addToCartMutation.isPending}\n            className=\"w-full bg-black text-white py-2 rounded text-sm font-medium hover:bg-gray-800 transition-colors\"\n            data-testid={`button-add-to-cart-${product.id}`}\n          >\n            {addToCartMutation.isPending ? \"ADDING...\" : \"ADD TO CART\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Quick View Modal */}\n      {showQuickView && (\n        <QuickViewModal\n          product={product}\n          isOpen={showQuickView}\n          onClose={() => setShowQuickView(false)}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":8112},"client/src/components/quick-view-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface Product {\n  id: string;\n  name: string;\n  slug: string;\n  price: string;\n  salePrice?: string;\n  imageUrl: string;\n  images?: string[];\n  rating?: string;\n  reviewCount?: number;\n  sizes?: string[];\n  colors?: string[];\n  description?: string;\n  shortDescription?: string;\n  isOnSale?: boolean;\n}\n\ninterface QuickViewModalProps {\n  product: Product;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function QuickViewModal({ product, isOpen, onClose }: QuickViewModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedSize, setSelectedSize] = useState(\"\");\n  const [selectedColor, setSelectedColor] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [activeImage, setActiveImage] = useState(0);\n\n  const addToCartMutation = useMutation({\n    mutationFn: async (cartData: any) => {\n      await apiRequest(\"POST\", \"/api/cart\", cartData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Added to Cart\",\n        description: \"Product has been added to your cart!\",\n      });\n      onClose();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addToWishlistMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest(\"POST\", \"/api/wishlist\", { productId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Added to Wishlist\",\n        description: \"Product has been added to your wishlist!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to wishlist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddToCart = () => {\n    if (!user) {\n      toast({\n        title: \"Please Login\",\n        description: \"You need to login to add items to cart\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (product.sizes && product.sizes.length > 0 && !selectedSize) {\n      toast({\n        title: \"Select Size\",\n        description: \"Please select a size\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addToCartMutation.mutate({\n      productId: product.id,\n      quantity,\n      size: selectedSize || null,\n      color: selectedColor || null,\n    });\n  };\n\n  const handleAddToWishlist = () => {\n    if (!user) {\n      toast({\n        title: \"Please Login\",\n        description: \"You need to login to add items to wishlist\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addToWishlistMutation.mutate(product.id);\n  };\n\n  const displayPrice = product.salePrice || product.price;\n  const originalPrice = product.salePrice ? product.price : null;\n  const discountPercent = originalPrice \n    ? Math.round(((parseFloat(originalPrice) - parseFloat(displayPrice)) / parseFloat(originalPrice)) * 100)\n    : 0;\n\n  const images = product.images && product.images.length > 0 \n    ? product.images \n    : [product.imageUrl || \"https://images.unsplash.com/photo-1519238263530-99bdd11df2ea?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\"];\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal active items-center justify-center p-4\" data-testid=\"quick-view-modal\">\n      <div className=\"bg-white rounded-2xl max-w-4xl w-full max-h-screen overflow-y-auto\">\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-2xl font-bold\" data-testid=\"text-quick-view-title\">Quick View</h2>\n            <button \n              onClick={onClose}\n              className=\"text-gray-500 hover:text-gray-700 text-2xl\"\n              data-testid=\"button-close-quick-view\"\n            >\n              <i className=\"fas fa-times\"></i>\n            </button>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* Product Images */}\n            <div>\n              <img \n                src={images[activeImage]} \n                alt={product.name}\n                className=\"w-full h-96 object-cover rounded-xl mb-4\"\n                data-testid=\"img-quick-view-main\"\n              />\n              <div className=\"grid grid-cols-4 gap-2\">\n                {images.map((image: string, index: number) => (\n                  <img\n                    key={index}\n                    src={image}\n                    alt={`${product.name} ${index + 1}`}\n                    className={`w-full h-20 object-cover rounded-lg cursor-pointer border-2 ${\n                      activeImage === index ? \"border-primary\" : \"border-gray-200\"\n                    }`}\n                    onClick={() => setActiveImage(index)}\n                    data-testid={`img-quick-view-thumbnail-${index}`}\n                  />\n                ))}\n              </div>\n            </div>\n            \n            {/* Product Details */}\n            <div>\n              <h3 className=\"text-2xl font-bold mb-4\" data-testid=\"text-quick-view-product-name\">{product.name}</h3>\n              \n              {product.rating && parseFloat(product.rating) > 0 && (\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"star-rating mr-2\">\n                    {Array.from({ length: 5 }, (_, i) => (\n                      <i key={i} className={`${i < Math.floor(parseFloat(product.rating || \"0\")) ? \"fas\" : \"far\"} fa-star`}></i>\n                    ))}\n                  </div>\n                  <span className=\"text-gray-500\" data-testid=\"text-quick-view-review-count\">({product.reviewCount} reviews)</span>\n                </div>\n              )}\n\n              <div className=\"mb-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-3xl font-bold text-primary\" data-testid=\"text-quick-view-price\">₹{displayPrice}</span>\n                  {originalPrice && (\n                    <>\n                      <span className=\"text-gray-500 line-through text-xl\" data-testid=\"text-quick-view-original-price\">₹{originalPrice}</span>\n                      <Badge variant=\"destructive\" data-testid=\"badge-quick-view-discount\">{discountPercent}% OFF</Badge>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              {product.shortDescription && (\n                <p className=\"text-gray-600 mb-6\" data-testid=\"text-quick-view-description\">{product.shortDescription}</p>\n              )}\n\n              {/* Size Selection */}\n              {product.sizes && product.sizes.length > 0 && (\n                <div className=\"mb-6\">\n                  <h4 className=\"font-semibold mb-2\">Select Size/Age:</h4>\n                  <Select value={selectedSize} onValueChange={setSelectedSize}>\n                    <SelectTrigger className=\"w-full\" data-testid=\"select-quick-view-size\">\n                      <SelectValue placeholder=\"Choose size\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {product.sizes.map((size: string) => (\n                        <SelectItem key={size} value={size}>{size}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {/* Color Selection */}\n              {product.colors && product.colors.length > 0 && (\n                <div className=\"mb-6\">\n                  <h4 className=\"font-semibold mb-2\">Select Color:</h4>\n                  <Select value={selectedColor} onValueChange={setSelectedColor}>\n                    <SelectTrigger className=\"w-full\" data-testid=\"select-quick-view-color\">\n                      <SelectValue placeholder=\"Choose color\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {product.colors.map((color: string) => (\n                        <SelectItem key={color} value={color}>{color}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n\n              {/* Quantity */}\n              <div className=\"mb-6\">\n                <h4 className=\"font-semibold mb-2\">Quantity:</h4>\n                <div className=\"flex items-center space-x-3\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                    data-testid=\"button-quick-view-decrease\"\n                  >\n                    -\n                  </Button>\n                  <span className=\"text-lg font-medium\" data-testid=\"text-quick-view-quantity\">{quantity}</span>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setQuantity(quantity + 1)}\n                    data-testid=\"button-quick-view-increase\"\n                  >\n                    +\n                  </Button>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"space-y-3 mb-6\">\n                <Button\n                  onClick={handleAddToCart}\n                  disabled={addToCartMutation.isPending}\n                  className=\"w-full bg-primary text-white py-4 rounded-full font-semibold text-lg hover:bg-primary/90\"\n                  data-testid=\"button-quick-view-add-to-cart\"\n                >\n                  {addToCartMutation.isPending ? \"Adding...\" : \"Add to Cart\"}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleAddToWishlist}\n                  disabled={addToWishlistMutation.isPending}\n                  className=\"w-full py-3 rounded-full font-medium\"\n                  data-testid=\"button-quick-view-add-to-wishlist\"\n                >\n                  {addToWishlistMutation.isPending ? \"Adding...\" : \"Add to Wishlist\"}\n                </Button>\n              </div>\n\n              {/* Product Features */}\n              <div className=\"text-sm text-gray-600 space-y-1\">\n                <p data-testid=\"text-quick-view-shipping\"><i className=\"fas fa-truck mr-2\"></i>Free shipping on orders above ₹1000</p>\n                <p data-testid=\"text-quick-view-return\"><i className=\"fas fa-undo mr-2\"></i>30-day return policy</p>\n                <p data-testid=\"text-quick-view-quality\"><i className=\"fas fa-shield-alt mr-2\"></i>Quality guaranteed</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11893},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":405},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\n// Schema definitions\nconst siteSettingSchema = z.object({\n  key: z.string().min(1, \"Key is required\"),\n  value: z.string(),\n  category: z.string().min(1, \"Category is required\"),\n  type: z.string().default(\"text\"),\n  description: z.string().optional(),\n  isActive: z.boolean().default(true),\n});\n\nconst sliderSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  imageUrl: z.string().url(\"Please enter a valid image URL\"),\n  linkUrl: z.string().url(\"Please enter a valid link URL\").optional(),\n  buttonText: z.string().optional(),\n  position: z.number().min(0, \"Position must be 0 or greater\"),\n  type: z.string().default(\"slider\"),\n  placement: z.string().default(\"home\"),\n  isActive: z.boolean().default(true),\n  startDate: z.string().optional(),\n  endDate: z.string().optional(),\n});\n\nconst couponSchema = z.object({\n  code: z.string().min(1, \"Coupon code is required\"),\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  type: z.string().min(1, \"Type is required\"),\n  value: z.string().min(1, \"Value is required\"),\n  minimumAmount: z.string().optional(),\n  maximumDiscount: z.string().optional(),\n  usageLimit: z.number().optional(),\n  userLimit: z.number().default(1),\n  isActive: z.boolean().default(true),\n  startDate: z.string().optional(),\n  endDate: z.string().optional(),\n});\n\nconst paymentSettingSchema = z.object({\n  provider: z.string().min(1, \"Provider is required\"),\n  displayName: z.string().min(1, \"Display name is required\"),\n  apiKey: z.string().optional(),\n  secretKey: z.string().optional(),\n  webhookSecret: z.string().optional(),\n  isActive: z.boolean().default(false),\n  isTestMode: z.boolean().default(true),\n  supportedCurrencies: z.array(z.string()).default([\"INR\"]),\n});\n\ntype SiteSettingForm = z.infer<typeof siteSettingSchema>;\ntype SliderForm = z.infer<typeof sliderSchema>;\ntype CouponForm = z.infer<typeof couponSchema>;\ntype PaymentSettingForm = z.infer<typeof paymentSettingSchema>;\n\nexport default function AdminDashboard() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [activeSubTab, setActiveSubTab] = useState(\"overview\");\n  const [isSettingDialogOpen, setIsSettingDialogOpen] = useState(false);\n  const [isSliderDialogOpen, setIsSliderDialogOpen] = useState(false);\n  const [isCouponDialogOpen, setIsCouponDialogOpen] = useState(false);\n  const [isPaymentDialogOpen, setIsPaymentDialogOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n\n  // Redirect if not admin\n  useEffect(() => {\n    if (!authLoading && (!user || !user.isAdmin)) {\n      toast({\n        title: \"Access Denied\",\n        description: \"Admin access required\",\n        variant: \"destructive\",\n      });\n      window.location.href = \"/admin/login\";\n    }\n  }, [user, authLoading, toast]);\n\n  // Fetch admin data\n  const { data: siteSettings = [], isLoading: settingsLoading } = useQuery({\n    queryKey: [\"/api/admin/site-settings\"],\n    enabled: !!user?.isAdmin,\n  });\n\n  const { data: sliders = [], isLoading: slidersLoading } = useQuery({\n    queryKey: [\"/api/admin/sliders\"],\n    enabled: !!user?.isAdmin,\n  });\n\n  const { data: coupons = [], isLoading: couponsLoading } = useQuery({\n    queryKey: [\"/api/admin/coupons\"],\n    enabled: !!user?.isAdmin,\n  });\n\n  const { data: paymentSettings = [], isLoading: paymentLoading } = useQuery({\n    queryKey: [\"/api/admin/payment-settings\"],\n    enabled: !!user?.isAdmin,\n  });\n\n  const { data: customers = { customers: [], total: 0 }, isLoading: customersLoading } = useQuery({\n    queryKey: [\"/api/admin/customers\", { limit: 100 }],\n    enabled: !!user?.isAdmin,\n  });\n\n  const { data: analyticsData, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"/api/admin/analytics/summary\"],\n    enabled: !!user?.isAdmin,\n  });\n\n  // Forms\n  const siteSettingForm = useForm<SiteSettingForm>({\n    resolver: zodResolver(siteSettingSchema),\n    defaultValues: {\n      key: \"\",\n      value: \"\",\n      category: \"\",\n      type: \"text\",\n      description: \"\",\n      isActive: true,\n    },\n  });\n\n  const sliderForm = useForm<SliderForm>({\n    resolver: zodResolver(sliderSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      linkUrl: \"\",\n      buttonText: \"\",\n      position: 0,\n      type: \"slider\",\n      placement: \"home\",\n      isActive: true,\n      startDate: \"\",\n      endDate: \"\",\n    },\n  });\n\n  const couponForm = useForm<CouponForm>({\n    resolver: zodResolver(couponSchema),\n    defaultValues: {\n      code: \"\",\n      title: \"\",\n      description: \"\",\n      type: \"percentage\",\n      value: \"\",\n      minimumAmount: \"\",\n      maximumDiscount: \"\",\n      usageLimit: undefined,\n      userLimit: 1,\n      isActive: true,\n      startDate: \"\",\n      endDate: \"\",\n    },\n  });\n\n  const paymentForm = useForm<PaymentSettingForm>({\n    resolver: zodResolver(paymentSettingSchema),\n    defaultValues: {\n      provider: \"\",\n      displayName: \"\",\n      apiKey: \"\",\n      secretKey: \"\",\n      webhookSecret: \"\",\n      isActive: false,\n      isTestMode: true,\n      supportedCurrencies: [\"INR\"],\n    },\n  });\n\n  // Mutations\n  const createSiteSettingMutation = useMutation({\n    mutationFn: async (data: any) => await apiRequest(\"POST\", \"/api/admin/site-settings\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/site-settings\"] });\n      toast({ title: \"Setting saved successfully\" });\n      setIsSettingDialogOpen(false);\n      siteSettingForm.reset();\n    },\n    onError: () => toast({ title: \"Error\", description: \"Failed to save setting\", variant: \"destructive\" }),\n  });\n\n  const createSliderMutation = useMutation({\n    mutationFn: async (data: any) => await apiRequest(\"POST\", \"/api/admin/sliders\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/sliders\"] });\n      toast({ title: \"Slider saved successfully\" });\n      setIsSliderDialogOpen(false);\n      sliderForm.reset();\n    },\n    onError: () => toast({ title: \"Error\", description: \"Failed to save slider\", variant: \"destructive\" }),\n  });\n\n  const createCouponMutation = useMutation({\n    mutationFn: async (data: any) => await apiRequest(\"POST\", \"/api/admin/coupons\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/coupons\"] });\n      toast({ title: \"Coupon created successfully\" });\n      setIsCouponDialogOpen(false);\n      couponForm.reset();\n    },\n    onError: () => toast({ title: \"Error\", description: \"Failed to create coupon\", variant: \"destructive\" }),\n  });\n\n  const createPaymentMutation = useMutation({\n    mutationFn: async (data: any) => await apiRequest(\"POST\", \"/api/admin/payment-settings\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/payment-settings\"] });\n      toast({ title: \"Payment setting saved successfully\" });\n      setIsPaymentDialogOpen(false);\n      paymentForm.reset();\n    },\n    onError: () => toast({ title: \"Error\", description: \"Failed to save payment setting\", variant: \"destructive\" }),\n  });\n\n  const deleteItemMutation = useMutation({\n    mutationFn: async ({ endpoint, id }: { endpoint: string; id: string }) => \n      await apiRequest(\"DELETE\", `${endpoint}/${id}`),\n    onSuccess: (_, variables) => {\n      const queryKeys = {\n        \"/api/admin/site-settings\": [\"/api/admin/site-settings\"],\n        \"/api/admin/sliders\": [\"/api/admin/sliders\"],\n        \"/api/admin/coupons\": [\"/api/admin/coupons\"],\n        \"/api/admin/payment-settings\": [\"/api/admin/payment-settings\"],\n      };\n      const key = queryKeys[variables.endpoint as keyof typeof queryKeys];\n      if (key) queryClient.invalidateQueries({ queryKey: key });\n      toast({ title: \"Item deleted successfully\" });\n    },\n    onError: () => toast({ title: \"Error\", description: \"Failed to delete item\", variant: \"destructive\" }),\n  });\n\n  // Form handlers\n  const onSubmitSiteSetting = (data: SiteSettingForm) => {\n    createSiteSettingMutation.mutate(data);\n  };\n\n  const onSubmitSlider = (data: SliderForm) => {\n    const sliderData = {\n      ...data,\n      position: Number(data.position),\n      startDate: data.startDate ? new Date(data.startDate).toISOString() : null,\n      endDate: data.endDate ? new Date(data.endDate).toISOString() : null,\n    };\n    createSliderMutation.mutate(sliderData);\n  };\n\n  const onSubmitCoupon = (data: CouponForm) => {\n    const couponData = {\n      ...data,\n      value: parseFloat(data.value),\n      minimumAmount: data.minimumAmount ? parseFloat(data.minimumAmount) : null,\n      maximumDiscount: data.maximumDiscount ? parseFloat(data.maximumDiscount) : null,\n      startDate: data.startDate ? new Date(data.startDate).toISOString() : null,\n      endDate: data.endDate ? new Date(data.endDate).toISOString() : null,\n    };\n    createCouponMutation.mutate(couponData);\n  };\n\n  const onSubmitPayment = (data: PaymentSettingForm) => {\n    createPaymentMutation.mutate(data);\n  };\n\n  const handleDelete = (endpoint: string, id: string) => {\n    if (confirm(\"Are you sure you want to delete this item?\")) {\n      deleteItemMutation.mutate({ endpoint, id });\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await fetch(\"/api/auth/logout\", { method: \"POST\" });\n      window.location.href = \"/admin/login\";\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n    }\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user?.isAdmin) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      {/* Sidebar */}\n      <div className=\"w-72 bg-white shadow-lg flex flex-col\">\n        <div className=\"p-6 border-b flex-shrink-0\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-pink-500 to-blue-500 rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-child text-white\"></i>\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-800\">Vimishe Fashion</h1>\n              <p className=\"text-sm text-gray-500\">Admin Panel</p>\n            </div>\n          </div>\n        </div>\n\n        <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n          <button\n            onClick={() => setActiveTab(\"dashboard\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"dashboard\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-dashboard\"\n          >\n            <i className=\"fas fa-chart-bar w-5\"></i>\n            <span>Dashboard</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"content\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"content\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-content\"\n          >\n            <i className=\"fas fa-edit w-5\"></i>\n            <span>Website Content</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"sliders\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"sliders\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-sliders\"\n          >\n            <i className=\"fas fa-images w-5\"></i>\n            <span>Sliders & Banners</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"coupons\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"coupons\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-coupons\"\n          >\n            <i className=\"fas fa-tags w-5\"></i>\n            <span>Coupons & Offers</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"payments\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"payments\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-payments\"\n          >\n            <i className=\"fas fa-credit-card w-5\"></i>\n            <span>Payment Settings</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"customers\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"customers\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-customers\"\n          >\n            <i className=\"fas fa-users w-5\"></i>\n            <span>Customers</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"analytics\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"analytics\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-analytics\"\n          >\n            <i className=\"fas fa-chart-line w-5\"></i>\n            <span>Analytics</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"products\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"products\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-products\"\n          >\n            <i className=\"fas fa-box w-5\"></i>\n            <span>Products</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"orders\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"orders\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-orders\"\n          >\n            <i className=\"fas fa-shopping-cart w-5\"></i>\n            <span>Orders</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"categories\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"categories\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-categories\"\n          >\n            <i className=\"fas fa-list w-5\"></i>\n            <span>Categories</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"reviews\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"reviews\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-reviews\"\n          >\n            <i className=\"fas fa-star w-5\"></i>\n            <span>Reviews</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"seo\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"seo\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-seo\"\n          >\n            <i className=\"fas fa-search w-5\"></i>\n            <span>SEO Settings</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"whatsapp\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"whatsapp\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-whatsapp\"\n          >\n            <i className=\"fab fa-whatsapp w-5\"></i>\n            <span>WhatsApp Integration</span>\n          </button>\n\n          <button\n            onClick={() => setActiveTab(\"appearance\")}\n            className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n              activeTab === \"appearance\"\n                ? \"bg-pink-50 text-pink-600 border-l-4 border-pink-500\"\n                : \"text-gray-600 hover:bg-gray-50\"\n            }`}\n            data-testid=\"nav-appearance\"\n          >\n            <i className=\"fas fa-palette w-5\"></i>\n            <span>Appearance</span>\n          </button>\n        </nav>\n\n        <div className=\"flex-shrink-0 p-4 border-t bg-white\">\n          <div className=\"flex items-center space-x-3 mb-4\">\n            <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-user text-gray-600 text-sm\"></i>\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-gray-800\">{user?.firstName}</p>\n              <p className=\"text-xs text-gray-500\">Administrator</p>\n            </div>\n          </div>\n          <Button\n            onClick={handleLogout}\n            variant=\"outline\"\n            className=\"w-full\"\n            data-testid=\"button-admin-logout\"\n          >\n            <i className=\"fas fa-sign-out-alt mr-2\"></i>\n            Logout\n          </Button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 p-8 overflow-y-auto\">\n        {/* Dashboard Overview */}\n        {activeTab === \"dashboard\" && (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-3xl font-bold text-gray-800\">Admin Dashboard</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card className=\"border-l-4 border-l-blue-500\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Total Customers</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {(customers as any)?.total || 0}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-l-4 border-l-green-500\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Page Views</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {(analyticsData as any)?.totalPageViews || 0}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-l-4 border-l-yellow-500\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Total Revenue</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    ₹{(analyticsData as any)?.totalRevenue?.toFixed(2) || \"0.00\"}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-l-4 border-l-purple-500\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Active Coupons</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {(coupons as any[])?.filter((c: any) => c.isActive)?.length || 0}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n                <CardDescription>Manage your website content and settings</CardDescription>\n              </CardHeader>\n              <CardContent className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Button\n                  onClick={() => setActiveTab(\"content\")}\n                  variant=\"outline\"\n                  className=\"h-16 flex flex-col items-center space-y-2\"\n                  data-testid=\"quick-action-content\"\n                >\n                  <i className=\"fas fa-edit text-lg\"></i>\n                  <span className=\"text-sm\">Edit Content</span>\n                </Button>\n                <Button\n                  onClick={() => setActiveTab(\"sliders\")}\n                  variant=\"outline\"\n                  className=\"h-16 flex flex-col items-center space-y-2\"\n                  data-testid=\"quick-action-sliders\"\n                >\n                  <i className=\"fas fa-images text-lg\"></i>\n                  <span className=\"text-sm\">Manage Sliders</span>\n                </Button>\n                <Button\n                  onClick={() => setActiveTab(\"coupons\")}\n                  variant=\"outline\"\n                  className=\"h-16 flex flex-col items-center space-y-2\"\n                  data-testid=\"quick-action-coupons\"\n                >\n                  <i className=\"fas fa-tags text-lg\"></i>\n                  <span className=\"text-sm\">Create Coupons</span>\n                </Button>\n                <Button\n                  onClick={() => setActiveTab(\"analytics\")}\n                  variant=\"outline\"\n                  className=\"h-16 flex flex-col items-center space-y-2\"\n                  data-testid=\"quick-action-analytics\"\n                >\n                  <i className=\"fas fa-chart-line text-lg\"></i>\n                  <span className=\"text-sm\">View Analytics</span>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Website Content Management */}\n        {activeTab === \"content\" && (\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-3xl font-bold text-gray-800\">Website Content Management</h2>\n              <Dialog open={isSettingDialogOpen} onOpenChange={setIsSettingDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-setting\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add Setting\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Add Site Setting</DialogTitle>\n                  </DialogHeader>\n                  <Form {...siteSettingForm}>\n                    <form onSubmit={siteSettingForm.handleSubmit(onSubmitSiteSetting)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={siteSettingForm.control}\n                          name=\"key\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Setting Key</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"e.g., site_name, header_logo\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={siteSettingForm.control}\n                          name=\"category\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Category</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select category\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"header\">Header</SelectItem>\n                                  <SelectItem value=\"footer\">Footer</SelectItem>\n                                  <SelectItem value=\"menu\">Menu</SelectItem>\n                                  <SelectItem value=\"general\">General</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={siteSettingForm.control}\n                        name=\"value\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Value</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Setting value\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={siteSettingForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"Setting description\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setIsSettingDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createSiteSettingMutation.isPending}>\n                          {createSiteSettingMutation.isPending ? \"Saving...\" : \"Save Setting\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            {/* Site Settings by Category */}\n            <Tabs value={activeSubTab} onValueChange={setActiveSubTab}>\n              <TabsList>\n                <TabsTrigger value=\"header\">Header</TabsTrigger>\n                <TabsTrigger value=\"footer\">Footer</TabsTrigger>\n                <TabsTrigger value=\"menu\">Menu</TabsTrigger>\n                <TabsTrigger value=\"general\">General</TabsTrigger>\n              </TabsList>\n\n              {[\"header\", \"footer\", \"menu\", \"general\"].map((category) => (\n                <TabsContent key={category} value={category}>\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"capitalize\">{category} Settings</CardTitle>\n                      <CardDescription>\n                        Manage your website's {category} content and appearance\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      {settingsLoading ? (\n                        <div className=\"space-y-4\">\n                          {Array.from({ length: 3 }).map((_, i) => (\n                            <div key={i} className=\"animate-pulse h-16 bg-gray-200 rounded\"></div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {siteSettings\n                            .filter((setting: any) => setting.category === category)\n                            .map((setting: any) => (\n                              <div key={setting.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                                <div>\n                                  <h3 className=\"font-medium\">{setting.key}</h3>\n                                  <p className=\"text-sm text-gray-600\">{setting.description}</p>\n                                  <p className=\"text-sm text-gray-500 mt-1\">{setting.value}</p>\n                                </div>\n                                <div className=\"flex items-center space-x-2\">\n                                  <Badge variant={setting.isActive ? \"default\" : \"secondary\"}>\n                                    {setting.isActive ? \"Active\" : \"Inactive\"}\n                                  </Badge>\n                                  <Button\n                                    variant=\"destructive\"\n                                    size=\"sm\"\n                                    onClick={() => handleDelete(\"/api/admin/site-settings\", setting.id)}\n                                  >\n                                    <i className=\"fas fa-trash\"></i>\n                                  </Button>\n                                </div>\n                              </div>\n                            ))}\n                          {siteSettings.filter((setting: any) => setting.category === category).length === 0 && (\n                            <p className=\"text-gray-500 text-center py-8\">\n                              No {category} settings found. Add your first setting above.\n                            </p>\n                          )}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              ))}\n            </Tabs>\n          </div>\n        )}\n\n        {/* Sliders & Banners Management */}\n        {activeTab === \"sliders\" && (\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-3xl font-bold text-gray-800\">Sliders & Banners</h2>\n              <Dialog open={isSliderDialogOpen} onOpenChange={setIsSliderDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-slider\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add Slider\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Slider/Banner</DialogTitle>\n                  </DialogHeader>\n                  <Form {...sliderForm}>\n                    <form onSubmit={sliderForm.handleSubmit(onSubmitSlider)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={sliderForm.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Title</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Slider title\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={sliderForm.control}\n                          name=\"type\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Type</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"slider\">Slider</SelectItem>\n                                  <SelectItem value=\"banner\">Banner</SelectItem>\n                                  <SelectItem value=\"popup\">Popup</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={sliderForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Slider description\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={sliderForm.control}\n                        name=\"imageUrl\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Image URL</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"https://example.com/image.jpg\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={sliderForm.control}\n                          name=\"linkUrl\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Link URL (Optional)</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"https://example.com\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={sliderForm.control}\n                          name=\"buttonText\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Button Text (Optional)</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Shop Now\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <FormField\n                          control={sliderForm.control}\n                          name=\"placement\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Placement</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"home\">Home</SelectItem>\n                                  <SelectItem value=\"category\">Category</SelectItem>\n                                  <SelectItem value=\"product\">Product</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={sliderForm.control}\n                          name=\"position\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Position</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  type=\"number\" \n                                  placeholder=\"0\"\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={sliderForm.control}\n                          name=\"isActive\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel>Active</FormLabel>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={sliderForm.control}\n                          name=\"startDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Start Date (Optional)</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"datetime-local\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={sliderForm.control}\n                          name=\"endDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>End Date (Optional)</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"datetime-local\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setIsSliderDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createSliderMutation.isPending}>\n                          {createSliderMutation.isPending ? \"Creating...\" : \"Create Slider\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                {slidersLoading ? (\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 3 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse h-32 bg-gray-200 rounded\"></div>\n                    ))}\n                  </div>\n                ) : sliders.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">No sliders found. Create your first slider above.</p>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {sliders.map((slider: any) => (\n                      <div key={slider.id} className=\"border rounded-lg overflow-hidden\">\n                        <img\n                          src={slider.imageUrl}\n                          alt={slider.title}\n                          className=\"w-full h-48 object-cover\"\n                        />\n                        <div className=\"p-4\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <h3 className=\"font-semibold text-lg\">{slider.title}</h3>\n                            <div className=\"flex items-center space-x-1\">\n                              <Badge variant={slider.type === \"slider\" ? \"default\" : \"secondary\"}>\n                                {slider.type}\n                              </Badge>\n                              <Badge variant={slider.isActive ? \"default\" : \"secondary\"}>\n                                {slider.isActive ? \"Active\" : \"Inactive\"}\n                              </Badge>\n                            </div>\n                          </div>\n                          <p className=\"text-gray-600 text-sm mb-3\">{slider.description}</p>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"text-sm text-gray-500\">\n                              <span className=\"capitalize\">{slider.placement}</span> • Position {slider.position}\n                            </div>\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(\"/api/admin/sliders\", slider.id)}\n                            >\n                              <i className=\"fas fa-trash\"></i>\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Coupons & Offers Management */}\n        {activeTab === \"coupons\" && (\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-3xl font-bold text-gray-800\">Coupons & Offers</h2>\n              <Dialog open={isCouponDialogOpen} onOpenChange={setIsCouponDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-coupon\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Create Coupon\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Create New Coupon</DialogTitle>\n                  </DialogHeader>\n                  <Form {...couponForm}>\n                    <form onSubmit={couponForm.handleSubmit(onSubmitCoupon)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={couponForm.control}\n                          name=\"code\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Coupon Code</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"SAVE20\" className=\"uppercase\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={couponForm.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Title</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"20% Off Sale\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={couponForm.control}\n                        name=\"description\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Description</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"Get 20% off on all products\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={couponForm.control}\n                          name=\"type\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Discount Type</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"percentage\">Percentage</SelectItem>\n                                  <SelectItem value=\"fixed\">Fixed Amount</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={couponForm.control}\n                          name=\"value\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Value</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"number\" placeholder=\"20\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={couponForm.control}\n                          name=\"minimumAmount\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Minimum Amount (Optional)</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"number\" placeholder=\"500\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={couponForm.control}\n                          name=\"maximumDiscount\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Maximum Discount (Optional)</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"number\" placeholder=\"1000\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <FormField\n                          control={couponForm.control}\n                          name=\"usageLimit\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Usage Limit (Optional)</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  type=\"number\" \n                                  placeholder=\"100\"\n                                  onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={couponForm.control}\n                          name=\"userLimit\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Per User Limit</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  type=\"number\" \n                                  placeholder=\"1\"\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={couponForm.control}\n                          name=\"isActive\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel>Active</FormLabel>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={couponForm.control}\n                          name=\"startDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Start Date (Optional)</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"datetime-local\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={couponForm.control}\n                          name=\"endDate\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>End Date (Optional)</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"datetime-local\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setIsCouponDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createCouponMutation.isPending}>\n                          {createCouponMutation.isPending ? \"Creating...\" : \"Create Coupon\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                {couponsLoading ? (\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 4 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse h-20 bg-gray-200 rounded\"></div>\n                    ))}\n                  </div>\n                ) : coupons.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">No coupons found. Create your first coupon above.</p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {coupons.map((coupon: any) => (\n                      <div key={coupon.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"bg-green-100 text-green-800 px-3 py-1 rounded-full font-mono font-bold\">\n                              {coupon.code}\n                            </div>\n                            <div>\n                              <h3 className=\"font-semibold\">{coupon.title}</h3>\n                              <p className=\"text-sm text-gray-600\">{coupon.description}</p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"text-right\">\n                            <p className=\"font-semibold\">\n                              {coupon.type === \"percentage\" ? `${coupon.value}%` : `₹${coupon.value}`} Off\n                            </p>\n                            <p className=\"text-sm text-gray-500\">\n                              Used: {coupon.usageCount || 0}\n                              {coupon.usageLimit && ` / ${coupon.usageLimit}`}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant={coupon.isActive ? \"default\" : \"secondary\"}>\n                              {coupon.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => handleDelete(\"/api/admin/coupons\", coupon.id)}\n                            >\n                              <i className=\"fas fa-trash\"></i>\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Payment Settings Management */}\n        {activeTab === \"payments\" && (\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-3xl font-bold text-gray-800\">Payment Settings</h2>\n              <Dialog open={isPaymentDialogOpen} onOpenChange={setIsPaymentDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-payment\">\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Add Payment Method\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Add Payment Method</DialogTitle>\n                  </DialogHeader>\n                  <Form {...paymentForm}>\n                    <form onSubmit={paymentForm.handleSubmit(onSubmitPayment)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={paymentForm.control}\n                          name=\"provider\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Payment Provider</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select provider\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"stripe\">Stripe</SelectItem>\n                                  <SelectItem value=\"razorpay\">Razorpay</SelectItem>\n                                  <SelectItem value=\"paypal\">PayPal</SelectItem>\n                                  <SelectItem value=\"payu\">PayU</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={paymentForm.control}\n                          name=\"displayName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Display Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Credit/Debit Card\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={paymentForm.control}\n                        name=\"apiKey\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>API Key</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"password\" placeholder=\"Your API key\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={paymentForm.control}\n                        name=\"secretKey\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Secret Key</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"password\" placeholder=\"Your secret key\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={paymentForm.control}\n                        name=\"webhookSecret\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Webhook Secret (Optional)</FormLabel>\n                            <FormControl>\n                              <Input {...field} type=\"password\" placeholder=\"Webhook secret\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={paymentForm.control}\n                          name=\"isActive\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel>Active</FormLabel>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={paymentForm.control}\n                          name=\"isTestMode\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                              <div className=\"space-y-0.5\">\n                                <FormLabel>Test Mode</FormLabel>\n                              </div>\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button type=\"button\" variant=\"outline\" onClick={() => setIsPaymentDialogOpen(false)}>\n                          Cancel\n                        </Button>\n                        <Button type=\"submit\" disabled={createPaymentMutation.isPending}>\n                          {createPaymentMutation.isPending ? \"Saving...\" : \"Save Payment Method\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            </div>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                {paymentLoading ? (\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 3 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse h-16 bg-gray-200 rounded\"></div>\n                    ))}\n                  </div>\n                ) : paymentSettings.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">No payment methods configured. Add your first payment method above.</p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {paymentSettings.map((payment: any) => (\n                      <div key={payment.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center\">\n                            <i className={`fab fa-${payment.provider} text-xl`}></i>\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold\">{payment.displayName}</h3>\n                            <p className=\"text-sm text-gray-600 capitalize\">{payment.provider}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge variant={payment.isTestMode ? \"secondary\" : \"default\"}>\n                            {payment.isTestMode ? \"Test\" : \"Live\"}\n                          </Badge>\n                          <Badge variant={payment.isActive ? \"default\" : \"secondary\"}>\n                            {payment.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(\"/api/admin/payment-settings\", payment.id)}\n                          >\n                            <i className=\"fas fa-trash\"></i>\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Customer Management */}\n        {activeTab === \"customers\" && (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-3xl font-bold text-gray-800\">Customer Management</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Total Customers</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-blue-600\">\n                    {customers?.total || 0}\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle>Active This Month</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-green-600\">\n                    {customers?.activeThisMonth || 0}\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle>New This Week</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-purple-600\">\n                    {customers?.newThisWeek || 0}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Customer List</CardTitle>\n                <CardDescription>Manage your customers and view their analytics</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {customersLoading ? (\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 5 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse h-16 bg-gray-200 rounded\"></div>\n                    ))}\n                  </div>\n                ) : !customers?.customers || customers.customers.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-8\">No customers found.</p>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {customers.customers.map((customer: any) => (\n                      <div key={customer.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center\">\n                            <i className=\"fas fa-user text-gray-600\"></i>\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold\">\n                              {customer.firstName} {customer.lastName}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">{customer.email}</p>\n                            <p className=\"text-xs text-gray-500\">\n                              Joined {new Date(customer.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold\">₹{customer.totalSpent || 0}</p>\n                          <p className=\"text-sm text-gray-600\">{customer.orderCount || 0} orders</p>\n                          <Badge variant={customer.isAdmin ? \"default\" : \"secondary\"}>\n                            {customer.isAdmin ? \"Admin\" : \"Customer\"}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Analytics */}\n        {activeTab === \"analytics\" && (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-3xl font-bold text-gray-800\">Analytics & Reports</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Page Views</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {analyticsData?.totalPageViews || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Last 30 days</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Unique Visitors</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {analyticsData?.uniqueVisitors || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Last 30 days</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Conversion Rate</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {analyticsData?.conversionRate?.toFixed(1) || 0}%\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Last 30 days</p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm font-medium text-gray-600\">Avg. Order Value</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    ₹{analyticsData?.averageOrderValue?.toFixed(2) || 0}\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Last 30 days</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Popular Products</CardTitle>\n                  <CardDescription>Most viewed products this month</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {analyticsLoading ? (\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <div key={i} className=\"animate-pulse h-12 bg-gray-200 rounded\"></div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {analyticsData?.popularProducts?.slice(0, 5).map((product: any, index: number) => (\n                        <div key={product.id} className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <span className=\"text-sm font-medium text-gray-500\">#{index + 1}</span>\n                            <div>\n                              <p className=\"font-medium\">{product.name}</p>\n                              <p className=\"text-sm text-gray-600\">{product.views} views</p>\n                            </div>\n                          </div>\n                          <p className=\"font-semibold\">₹{product.price}</p>\n                        </div>\n                      )) || (\n                        <p className=\"text-gray-500 text-center py-4\">No data available</p>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Recent Activity</CardTitle>\n                  <CardDescription>Latest user interactions</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {analyticsLoading ? (\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <div key={i} className=\"animate-pulse h-12 bg-gray-200 rounded\"></div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {analyticsData?.recentEvents?.slice(0, 10).map((event: any) => (\n                        <div key={event.id} className=\"flex items-center justify-between text-sm\">\n                          <div>\n                            <span className=\"capitalize\">{event.eventType}</span>\n                            {event.productName && <span className=\"text-gray-600\"> - {event.productName}</span>}\n                          </div>\n                          <span className=\"text-gray-500\">\n                            {new Date(event.timestamp).toLocaleTimeString()}\n                          </span>\n                        </div>\n                      )) || (\n                        <p className=\"text-gray-500 text-center py-4\">No recent activity</p>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n\n        {/* Products & Orders - Simplified placeholders linking to existing admin */}\n        {(activeTab === \"products\" || activeTab === \"orders\") && (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-3xl font-bold text-gray-800 capitalize\">{activeTab} Management</h2>\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <i className={`fas fa-${activeTab === \"products\" ? \"box\" : \"shopping-cart\"} text-4xl text-gray-400 mb-4`}></i>\n                <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">\n                  {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Management\n                </h3>\n                <p className=\"text-gray-500 mb-4\">\n                  Manage your {activeTab} with the dedicated admin interface\n                </p>\n                <Button onClick={() => window.location.href = \"/admin\"}>\n                  Go to {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Admin\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":78556},"client/src/pages/admin-login.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nconst adminLoginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype AdminLoginForm = z.infer<typeof adminLoginSchema>;\n\nexport default function AdminLogin() {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<AdminLoginForm>({\n    resolver: zodResolver(adminLoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: AdminLoginForm) => {\n      const response = await fetch(\"/api/auth/admin-login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to the admin panel\",\n      });\n      // Redirect to admin dashboard\n      window.location.href = \"/admin/dashboard\";\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: AdminLoginForm) => {\n    setIsLoading(true);\n    loginMutation.mutate(data);\n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-50 to-blue-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-20 h-20 bg-gradient-to-r from-pink-500 to-blue-500 rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-user-shield text-white text-2xl\"></i>\n            </div>\n            <CardTitle className=\"text-3xl font-bold text-gray-800\">\n              Admin Login\n            </CardTitle>\n            <CardDescription className=\"text-gray-600\">\n              Access the YouGotPlanB Admin Dashboard\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700\">Email Address</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"email\"\n                          placeholder=\"admin@yougotplanb.com\"\n                          className=\"h-12 border-gray-300 focus:border-pink-500\"\n                          data-testid=\"input-admin-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700\">Password</FormLabel>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Enter your password\"\n                          className=\"h-12 border-gray-300 focus:border-pink-500\"\n                          data-testid=\"input-admin-password\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full h-12 bg-gradient-to-r from-pink-500 to-blue-500 hover:from-pink-600 hover:to-blue-600 text-white font-semibold text-lg\"\n                  disabled={isLoading || loginMutation.isPending}\n                  data-testid=\"button-admin-login\"\n                >\n                  {isLoading || loginMutation.isPending ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                      Signing In...\n                    </>\n                  ) : (\n                    \"Sign In to Admin Panel\"\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-500\">\n                Admin access only. Unauthorized access is prohibited.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":5610},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst productSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  slug: z.string().min(1, \"Slug is required\"),\n  description: z.string().optional(),\n  shortDescription: z.string().optional(),\n  price: z.string().min(1, \"Price is required\"),\n  salePrice: z.string().optional(),\n  sku: z.string().optional(),\n  stock: z.number().min(0, \"Stock must be 0 or greater\"),\n  imageUrl: z.string().url(\"Please enter a valid image URL\"),\n  categoryId: z.string().min(1, \"Category is required\"),\n  sizes: z.array(z.string()).optional(),\n  colors: z.array(z.string()).optional(),\n  tags: z.array(z.string()).optional(),\n  isActive: z.boolean().default(true),\n  isFeatured: z.boolean().default(false),\n  isOnSale: z.boolean().default(false),\n});\n\nconst categorySchema = z.object({\n  name: z.string().min(1, \"Category name is required\"),\n  slug: z.string().min(1, \"Slug is required\"),\n  description: z.string().optional(),\n  imageUrl: z.string().url(\"Please enter a valid image URL\").optional(),\n  parentId: z.string().optional(),\n  isActive: z.boolean().default(true),\n});\n\ntype ProductForm = z.infer<typeof productSchema>;\ntype CategoryForm = z.infer<typeof categorySchema>;\n\nexport default function Admin() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n  const [isProductDialogOpen, setIsProductDialogOpen] = useState(false);\n  const [isCategoryDialogOpen, setIsCategoryDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<any>(null);\n  const [editingCategory, setEditingCategory] = useState<any>(null);\n\n  // Redirect if not authenticated or not admin\n  useEffect(() => {\n    if (!authLoading && (!user || !user.isAdmin)) {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have permission to access the admin panel\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 500);\n      return;\n    }\n  }, [user, authLoading, toast]);\n\n  // Fetch data\n  const { data: products = { products: [], total: 0 }, isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", { limit: 100 }],\n    retry: false,\n    enabled: !!user?.isAdmin,\n  });\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n    enabled: !!user?.isAdmin,\n  });\n\n  const { data: orders = [], isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    retry: false,\n    enabled: !!user?.isAdmin,\n  });\n\n  // Product form\n  const productForm = useForm<ProductForm>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      name: \"\",\n      slug: \"\",\n      description: \"\",\n      shortDescription: \"\",\n      price: \"\",\n      salePrice: \"\",\n      sku: \"\",\n      stock: 0,\n      imageUrl: \"\",\n      categoryId: \"\",\n      sizes: [],\n      colors: [],\n      tags: [],\n      isActive: true,\n      isFeatured: false,\n      isOnSale: false,\n    },\n  });\n\n  // Category form\n  const categoryForm = useForm<CategoryForm>({\n    resolver: zodResolver(categorySchema),\n    defaultValues: {\n      name: \"\",\n      slug: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      parentId: \"\",\n      isActive: true,\n    },\n  });\n\n  // Mutations\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: any) => {\n      return await apiRequest(\"POST\", \"/api/products\", productData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Product Created\",\n        description: \"Product has been created successfully\",\n      });\n      setIsProductDialogOpen(false);\n      productForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return await apiRequest(\"PUT\", `/api/products/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\"] });\n      toast({\n        title: \"Product Updated\",\n        description: \"Product has been updated successfully\",\n      });\n      setIsProductDialogOpen(false);\n      setEditingProduct(null);\n      productForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (categoryData: any) => {\n      return await apiRequest(\"POST\", \"/api/categories\", categoryData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/categories\"] });\n      toast({\n        title: \"Category Created\",\n        description: \"Category has been created successfully\",\n      });\n      setIsCategoryDialogOpen(false);\n      categoryForm.reset();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Form handlers\n  const onSubmitProduct = (data: ProductForm) => {\n    const productData = {\n      ...data,\n      price: data.price.toString(),\n      salePrice: data.salePrice || null,\n      sizes: data.sizes?.filter(Boolean) || [],\n      colors: data.colors?.filter(Boolean) || [],\n      tags: data.tags?.filter(Boolean) || [],\n    };\n\n    if (editingProduct) {\n      updateProductMutation.mutate({ id: editingProduct.id, data: productData });\n    } else {\n      createProductMutation.mutate(productData);\n    }\n  };\n\n  const onSubmitCategory = (data: CategoryForm) => {\n    const categoryData = {\n      ...data,\n      parentId: data.parentId || null,\n    };\n\n    createCategoryMutation.mutate(categoryData);\n  };\n\n  const handleEditProduct = (product: any) => {\n    setEditingProduct(product);\n    productForm.reset({\n      name: product.name,\n      slug: product.slug,\n      description: product.description || \"\",\n      shortDescription: product.shortDescription || \"\",\n      price: product.price,\n      salePrice: product.salePrice || \"\",\n      sku: product.sku || \"\",\n      stock: product.stock || 0,\n      imageUrl: product.imageUrl || \"\",\n      categoryId: product.categoryId,\n      sizes: product.sizes || [],\n      colors: product.colors || [],\n      tags: product.tags || [],\n      isActive: product.isActive,\n      isFeatured: product.isFeatured,\n      isOnSale: product.isOnSale,\n    });\n    setIsProductDialogOpen(true);\n  };\n\n  const generateSlug = (name: string) => {\n    return name\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/(^-|-$)+/g, \"\");\n  };\n\n  // Calculate dashboard stats\n  const totalProducts = products?.products?.length || 0;\n  const totalOrders = Array.isArray(orders) ? orders.length : 0;\n  const totalRevenue = Array.isArray(orders) ? orders.reduce((sum: number, order: any) => sum + parseFloat(order.totalAmount || \"0\"), 0) : 0;\n  const pendingOrders = Array.isArray(orders) ? orders.filter((order: any) => order.status === \"pending\").length : 0;\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user?.isAdmin) {\n    return null; // Redirect is handled in useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-8\" data-testid=\"text-admin-title\">\n            Admin Dashboard\n          </h1>\n          \n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-4\" data-testid=\"tabs-admin\">\n              <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">Dashboard</TabsTrigger>\n              <TabsTrigger value=\"products\" data-testid=\"tab-products\">Products</TabsTrigger>\n              <TabsTrigger value=\"categories\" data-testid=\"tab-categories\">Categories</TabsTrigger>\n              <TabsTrigger value=\"orders\" data-testid=\"tab-orders\">Orders</TabsTrigger>\n            </TabsList>\n\n            {/* Dashboard Tab */}\n            <TabsContent value=\"dashboard\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card data-testid=\"card-total-products\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Products</CardTitle>\n                    <i className=\"fas fa-box text-primary\"></i>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-total-products\">{totalProducts}</div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-total-orders\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n                    <i className=\"fas fa-shopping-cart text-primary\"></i>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-total-orders\">{totalOrders}</div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-total-revenue\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n                    <i className=\"fas fa-rupee-sign text-primary\"></i>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-total-revenue\">₹{totalRevenue.toFixed(2)}</div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-pending-orders\">\n                  <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                    <CardTitle className=\"text-sm font-medium\">Pending Orders</CardTitle>\n                    <i className=\"fas fa-clock text-warning\"></i>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-pending-orders\">{pendingOrders}</div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Recent Orders */}\n              <Card>\n                <CardHeader>\n                  <CardTitle data-testid=\"text-recent-orders-title\">Recent Orders</CardTitle>\n                  <CardDescription>Latest orders from customers</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {ordersLoading ? (\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-16 bg-gray-200 rounded\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : !Array.isArray(orders) || orders.length === 0 ? (\n                    <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-recent-orders\">No orders yet</p>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {orders.slice(0, 5).map((order: any) => (\n                        <div key={order.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`recent-order-${order.id}`}>\n                          <div>\n                            <p className=\"font-medium\" data-testid={`text-recent-order-id-${order.id}`}>\n                              Order #{order.id.slice(-8)}\n                            </p>\n                            <p className=\"text-sm text-gray-600\" data-testid={`text-recent-order-date-${order.id}`}>\n                              {new Date(order.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-semibold\" data-testid={`text-recent-order-amount-${order.id}`}>\n                              ₹{order.totalAmount}\n                            </p>\n                            <Badge \n                              variant={order.status === \"delivered\" ? \"default\" : \"secondary\"}\n                              data-testid={`badge-recent-order-status-${order.id}`}\n                            >\n                              {order.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Products Tab */}\n            <TabsContent value=\"products\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold\" data-testid=\"text-products-title\">Products Management</h2>\n                <Dialog open={isProductDialogOpen} onOpenChange={setIsProductDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-add-product\">\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Add Product\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl max-h-screen overflow-y-auto\">\n                    <DialogHeader>\n                      <DialogTitle data-testid=\"text-product-dialog-title\">\n                        {editingProduct ? \"Edit Product\" : \"Add New Product\"}\n                      </DialogTitle>\n                      <DialogDescription>\n                        {editingProduct ? \"Update product information\" : \"Create a new product for your store\"}\n                      </DialogDescription>\n                    </DialogHeader>\n                    \n                    <Form {...productForm}>\n                      <form onSubmit={productForm.handleSubmit(onSubmitProduct)} className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={productForm.control}\n                            name=\"name\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Product Name</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    placeholder=\"Product name\"\n                                    onChange={(e) => {\n                                      field.onChange(e);\n                                      if (!editingProduct) {\n                                        productForm.setValue(\"slug\", generateSlug(e.target.value));\n                                      }\n                                    }}\n                                    data-testid=\"input-product-name\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={productForm.control}\n                            name=\"slug\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Slug</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"product-slug\" data-testid=\"input-product-slug\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={productForm.control}\n                          name=\"shortDescription\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Short Description</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Brief product description\" data-testid=\"input-product-short-description\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={productForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} placeholder=\"Detailed product description\" data-testid=\"textarea-product-description\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <FormField\n                            control={productForm.control}\n                            name=\"price\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Price (₹)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-product-price\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={productForm.control}\n                            name=\"salePrice\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Sale Price (₹)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} type=\"number\" step=\"0.01\" placeholder=\"0.00\" data-testid=\"input-product-sale-price\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={productForm.control}\n                            name=\"stock\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Stock</FormLabel>\n                                <FormControl>\n                                  <Input \n                                    {...field} \n                                    type=\"number\" \n                                    placeholder=\"0\"\n                                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                                    data-testid=\"input-product-stock\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={productForm.control}\n                            name=\"sku\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>SKU</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"Product SKU\" data-testid=\"input-product-sku\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={productForm.control}\n                            name=\"categoryId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Category</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid=\"select-product-category\">\n                                      <SelectValue placeholder=\"Select category\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    {Array.isArray(categories) && categories.map((category: any) => (\n                                      <SelectItem key={category.id} value={category.id}>\n                                        {category.name}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={productForm.control}\n                          name=\"imageUrl\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Image URL</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"https://example.com/image.jpg\" data-testid=\"input-product-image-url\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex space-x-4\">\n                          <FormField\n                            control={productForm.control}\n                            name=\"isActive\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex items-center space-x-2\">\n                                <FormControl>\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={field.value}\n                                    onChange={field.onChange}\n                                    data-testid=\"checkbox-product-active\"\n                                  />\n                                </FormControl>\n                                <FormLabel>Active</FormLabel>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={productForm.control}\n                            name=\"isFeatured\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex items-center space-x-2\">\n                                <FormControl>\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={field.value}\n                                    onChange={field.onChange}\n                                    data-testid=\"checkbox-product-featured\"\n                                  />\n                                </FormControl>\n                                <FormLabel>Featured</FormLabel>\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={productForm.control}\n                            name=\"isOnSale\"\n                            render={({ field }) => (\n                              <FormItem className=\"flex items-center space-x-2\">\n                                <FormControl>\n                                  <input\n                                    type=\"checkbox\"\n                                    checked={field.value}\n                                    onChange={field.onChange}\n                                    data-testid=\"checkbox-product-on-sale\"\n                                  />\n                                </FormControl>\n                                <FormLabel>On Sale</FormLabel>\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              setIsProductDialogOpen(false);\n                              setEditingProduct(null);\n                              productForm.reset();\n                            }}\n                            data-testid=\"button-cancel-product\"\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            disabled={createProductMutation.isPending || updateProductMutation.isPending}\n                            data-testid=\"button-save-product\"\n                          >\n                            {createProductMutation.isPending || updateProductMutation.isPending\n                              ? \"Saving...\"\n                              : editingProduct\n                              ? \"Update Product\"\n                              : \"Create Product\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <div className=\"bg-white rounded-xl shadow-md overflow-hidden\">\n                {productsLoading ? (\n                  <div className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-16 bg-gray-200 rounded\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ) : products?.products?.length === 0 ? (\n                  <div className=\"p-6 text-center\">\n                    <i className=\"fas fa-box text-4xl text-gray-300 mb-4\"></i>\n                    <p className=\"text-gray-500\" data-testid=\"text-no-products\">No products found</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Product</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Price</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Stock</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"bg-white divide-y divide-gray-200\">\n                        {products.products.map((product: any) => (\n                          <tr key={product.id} data-testid={`product-row-${product.id}`}>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center\">\n                                <img\n                                  src={product.imageUrl || \"https://images.unsplash.com/photo-1519238263530-99bdd11df2ea?ixlib=rb-4.0.3&auto=format&fit=crop&w=60&h=60\"}\n                                  alt={product.name}\n                                  className=\"w-12 h-12 object-cover rounded-lg\"\n                                  data-testid={`img-product-${product.id}`}\n                                />\n                                <div className=\"ml-4\">\n                                  <div className=\"text-sm font-medium text-gray-900\" data-testid={`text-product-name-${product.id}`}>\n                                    {product.name}\n                                  </div>\n                                  <div className=\"text-sm text-gray-500\" data-testid={`text-product-sku-${product.id}`}>\n                                    SKU: {product.sku || \"N/A\"}\n                                  </div>\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\" data-testid={`text-product-price-${product.id}`}>\n                                ₹{product.salePrice || product.price}\n                                {product.salePrice && (\n                                  <span className=\"text-gray-500 line-through ml-2\">₹{product.price}</span>\n                                )}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\" data-testid={`text-product-stock-${product.id}`}>\n                                {product.stock || 0}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex space-x-1\">\n                                {product.isActive && (\n                                  <Badge variant=\"default\" data-testid={`badge-product-active-${product.id}`}>Active</Badge>\n                                )}\n                                {product.isFeatured && (\n                                  <Badge variant=\"secondary\" data-testid={`badge-product-featured-${product.id}`}>Featured</Badge>\n                                )}\n                                {product.isOnSale && (\n                                  <Badge variant=\"destructive\" data-testid={`badge-product-sale-${product.id}`}>Sale</Badge>\n                                )}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleEditProduct(product)}\n                                data-testid={`button-edit-product-${product.id}`}\n                              >\n                                Edit\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            {/* Categories Tab */}\n            <TabsContent value=\"categories\" className=\"space-y-6\">\n              <div className=\"flex justify-between items-center\">\n                <h2 className=\"text-2xl font-bold\" data-testid=\"text-categories-title\">Categories Management</h2>\n                <Dialog open={isCategoryDialogOpen} onOpenChange={setIsCategoryDialogOpen}>\n                  <DialogTrigger asChild>\n                    <Button data-testid=\"button-add-category\">\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Add Category\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle data-testid=\"text-category-dialog-title\">Add New Category</DialogTitle>\n                      <DialogDescription>Create a new product category</DialogDescription>\n                    </DialogHeader>\n                    \n                    <Form {...categoryForm}>\n                      <form onSubmit={categoryForm.handleSubmit(onSubmitCategory)} className=\"space-y-4\">\n                        <FormField\n                          control={categoryForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Category Name</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  placeholder=\"Category name\"\n                                  onChange={(e) => {\n                                    field.onChange(e);\n                                    categoryForm.setValue(\"slug\", generateSlug(e.target.value));\n                                  }}\n                                  data-testid=\"input-category-name\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={categoryForm.control}\n                          name=\"slug\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Slug</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"category-slug\" data-testid=\"input-category-slug\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={categoryForm.control}\n                          name=\"description\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} placeholder=\"Category description\" data-testid=\"textarea-category-description\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={categoryForm.control}\n                          name=\"imageUrl\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Image URL</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"https://example.com/image.jpg\" data-testid=\"input-category-image-url\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={categoryForm.control}\n                          name=\"parentId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Parent Category</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-parent-category\">\n                                    <SelectValue placeholder=\"Select parent category (optional)\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"\">No Parent</SelectItem>\n                                  {Array.isArray(categories) && categories.map((category: any) => (\n                                    <SelectItem key={category.id} value={category.id}>\n                                      {category.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={categoryForm.control}\n                          name=\"isActive\"\n                          render={({ field }) => (\n                            <FormItem className=\"flex items-center space-x-2\">\n                              <FormControl>\n                                <input\n                                  type=\"checkbox\"\n                                  checked={field.value}\n                                  onChange={field.onChange}\n                                  data-testid=\"checkbox-category-active\"\n                                />\n                              </FormControl>\n                              <FormLabel>Active</FormLabel>\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              setIsCategoryDialogOpen(false);\n                              categoryForm.reset();\n                            }}\n                            data-testid=\"button-cancel-category\"\n                          >\n                            Cancel\n                          </Button>\n                          <Button\n                            type=\"submit\"\n                            disabled={createCategoryMutation.isPending}\n                            data-testid=\"button-save-category\"\n                          >\n                            {createCategoryMutation.isPending ? \"Creating...\" : \"Create Category\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {categoriesLoading ? (\n                  Array.from({ length: 6 }).map((_, i) => (\n                    <div key={i} className=\"animate-pulse\">\n                      <div className=\"bg-white p-6 rounded-xl shadow-md\">\n                        <div className=\"w-full h-32 bg-gray-200 rounded-lg mb-4\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                      </div>\n                    </div>\n                  ))\n                ) : categories.length === 0 ? (\n                  <div className=\"col-span-full text-center py-12\">\n                    <i className=\"fas fa-tags text-4xl text-gray-300 mb-4\"></i>\n                    <p className=\"text-gray-500\" data-testid=\"text-no-categories\">No categories found</p>\n                  </div>\n                ) : (\n                  categories.map((category: any) => (\n                    <Card key={category.id} data-testid={`category-card-${category.id}`}>\n                      <CardContent className=\"p-6\">\n                        <img\n                          src={category.imageUrl || \"https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\"}\n                          alt={category.name}\n                          className=\"w-full h-32 object-cover rounded-lg mb-4\"\n                          data-testid={`img-category-${category.id}`}\n                        />\n                        <h3 className=\"font-semibold text-lg mb-2\" data-testid={`text-category-name-${category.id}`}>\n                          {category.name}\n                        </h3>\n                        <p className=\"text-gray-600 text-sm mb-4\" data-testid={`text-category-description-${category.id}`}>\n                          {category.description || \"No description\"}\n                        </p>\n                        <div className=\"flex justify-between items-center\">\n                          <Badge variant={category.isActive ? \"default\" : \"secondary\"} data-testid={`badge-category-status-${category.id}`}>\n                            {category.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-edit-category-${category.id}`}>\n                            Edit\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </TabsContent>\n\n            {/* Orders Tab */}\n            <TabsContent value=\"orders\" className=\"space-y-6\">\n              <h2 className=\"text-2xl font-bold\" data-testid=\"text-orders-title\">Orders Management</h2>\n              \n              <div className=\"bg-white rounded-xl shadow-md overflow-hidden\">\n                {ordersLoading ? (\n                  <div className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: 5 }).map((_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-16 bg-gray-200 rounded\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ) : orders.length === 0 ? (\n                  <div className=\"p-6 text-center\">\n                    <i className=\"fas fa-shopping-cart text-4xl text-gray-300 mb-4\"></i>\n                    <p className=\"text-gray-500\" data-testid=\"text-no-orders\">No orders found</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead className=\"bg-gray-50\">\n                        <tr>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Order ID</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Customer</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Total</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                          <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Payment</th>\n                        </tr>\n                      </thead>\n                      <tbody className=\"bg-white divide-y divide-gray-200\">\n                        {orders.map((order: any) => (\n                          <tr key={order.id} data-testid={`order-row-${order.id}`}>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm font-medium text-gray-900\" data-testid={`text-order-id-${order.id}`}>\n                                #{order.id.slice(-8)}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\" data-testid={`text-order-customer-${order.id}`}>\n                                {order.shippingAddress?.firstName} {order.shippingAddress?.lastName}\n                              </div>\n                              <div className=\"text-sm text-gray-500\" data-testid={`text-order-customer-email-${order.id}`}>\n                                {order.shippingAddress?.email}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\" data-testid={`text-order-date-${order.id}`}>\n                                {new Date(order.createdAt).toLocaleDateString()}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm font-medium text-gray-900\" data-testid={`text-order-total-${order.id}`}>\n                                ₹{order.totalAmount}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <Badge \n                                variant={order.status === \"delivered\" ? \"default\" : order.status === \"cancelled\" ? \"destructive\" : \"secondary\"}\n                                data-testid={`badge-order-status-${order.id}`}\n                              >\n                                {order.status}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\" data-testid={`text-order-payment-${order.id}`}>\n                                {order.paymentMethod || \"N/A\"}\n                              </div>\n                              <Badge \n                                variant={order.paymentStatus === \"paid\" ? \"default\" : \"secondary\"}\n                                data-testid={`badge-payment-status-${order.id}`}\n                              >\n                                {order.paymentStatus || \"pending\"}\n                              </Badge>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":50547},"client/src/pages/cart.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\nexport default function Cart() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n    retry: false,\n    enabled: !!user,\n  });\n\n  const updateCartMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: string; quantity: number }) => {\n      await apiRequest(\"PUT\", `/api/cart/${id}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update cart item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/cart/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Removed\",\n        description: \"Item removed from cart\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item from cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", \"/api/cart\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Cart Cleared\",\n        description: \"All items removed from cart\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleUpdateQuantity = (id: string, quantity: number) => {\n    if (quantity < 1) return;\n    updateCartMutation.mutate({ id, quantity });\n  };\n\n  const handleRemoveItem = (id: string) => {\n    removeFromCartMutation.mutate(id);\n  };\n\n  const handleClearCart = () => {\n    clearCartMutation.mutate();\n  };\n\n  const handleCheckout = () => {\n    setLocation(\"/checkout\");\n  };\n\n  const subtotal = cartItems.reduce((total: number, item: any) => {\n    return total + (parseFloat(item.product?.salePrice || item.product?.price || \"0\") * item.quantity);\n  }, 0);\n\n  const shippingThreshold = 1000;\n  const isEligibleForFreeShipping = subtotal >= shippingThreshold;\n  const shippingCost = isEligibleForFreeShipping ? 0 : 100;\n  const total = subtotal + shippingCost;\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8 text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">Please Login</h1>\n          <p className=\"text-gray-600 mb-6\">You need to login to view your cart</p>\n          <Button onClick={() => window.location.href = \"/api/login\"}>\n            Login\n          </Button>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"animate-pulse space-y-4\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <div key={i} className=\"bg-white p-6 rounded-xl shadow-md\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-20 h-20 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-6 bg-gray-200 rounded w-32\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-800\" data-testid=\"text-cart-title\">Shopping Cart</h1>\n          {cartItems.length > 0 && (\n            <Button \n              variant=\"outline\" \n              onClick={handleClearCart}\n              disabled={clearCartMutation.isPending}\n              data-testid=\"button-clear-cart\"\n            >\n              Clear Cart\n            </Button>\n          )}\n        </div>\n\n        {cartItems.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"text-gray-500 text-lg mb-4\" data-testid=\"text-empty-cart\">Your cart is empty</div>\n            <Button onClick={() => setLocation(\"/products\")} data-testid=\"button-continue-shopping\">\n              Continue Shopping\n            </Button>\n          </div>\n        ) : (\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Cart Items */}\n            <div className=\"lg:col-span-2 space-y-4\">\n              {cartItems.map((item: any) => (\n                <div key={item.id} className=\"bg-white p-6 rounded-xl shadow-md\" data-testid={`cart-item-${item.id}`}>\n                  <div className=\"flex items-center space-x-4\">\n                    <img \n                      src={item.product?.imageUrl || \"https://images.unsplash.com/photo-1519238263530-99bdd11df2ea?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"}\n                      alt={item.product?.name}\n                      className=\"w-20 h-20 object-cover rounded-lg\"\n                      data-testid={`img-cart-item-${item.id}`}\n                    />\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-lg\" data-testid={`text-item-name-${item.id}`}>\n                        {item.product?.name}\n                      </h3>\n                      <div className=\"text-sm text-gray-600 space-y-1\">\n                        {item.size && <p data-testid={`text-item-size-${item.id}`}>Size: {item.size}</p>}\n                        {item.color && <p data-testid={`text-item-color-${item.id}`}>Color: {item.color}</p>}\n                      </div>\n                      <div className=\"flex items-center justify-between mt-3\">\n                        <div>\n                          <span className=\"text-xl font-bold text-primary\" data-testid={`text-item-price-${item.id}`}>\n                            ₹{item.product?.salePrice || item.product?.price}\n                          </span>\n                          {item.product?.salePrice && (\n                            <span className=\"text-gray-500 line-through ml-2\" data-testid={`text-item-original-price-${item.id}`}>\n                              ₹{item.product?.price}\n                            </span>\n                          )}\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}\n                            disabled={updateCartMutation.isPending}\n                            data-testid={`button-decrease-${item.id}`}\n                          >\n                            -\n                          </Button>\n                          <span className=\"font-medium w-8 text-center\" data-testid={`text-item-quantity-${item.id}`}>\n                            {item.quantity}\n                          </span>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}\n                            disabled={updateCartMutation.isPending}\n                            data-testid={`button-increase-${item.id}`}\n                          >\n                            +\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => handleRemoveItem(item.id)}\n                            disabled={removeFromCartMutation.isPending}\n                            data-testid={`button-remove-${item.id}`}\n                          >\n                            Remove\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Order Summary */}\n            <div className=\"bg-white p-6 rounded-xl shadow-md h-fit\">\n              <h3 className=\"text-xl font-bold mb-6\" data-testid=\"text-order-summary\">Order Summary</h3>\n              \n              <div className=\"space-y-3 mb-6\">\n                <div className=\"flex justify-between\">\n                  <span data-testid=\"text-subtotal-label\">Subtotal</span>\n                  <span data-testid=\"text-subtotal-amount\">₹{subtotal.toFixed(2)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span data-testid=\"text-shipping-label\">Shipping</span>\n                  <span data-testid=\"text-shipping-amount\">\n                    {isEligibleForFreeShipping ? \"Free\" : `₹${shippingCost}`}\n                  </span>\n                </div>\n                {!isEligibleForFreeShipping && (\n                  <div className=\"text-sm text-primary\">\n                    <p data-testid=\"text-free-shipping-message\">\n                      Add ₹{(shippingThreshold - subtotal).toFixed(2)} more for free shipping!\n                    </p>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-primary to-secondary h-2 rounded-full\" \n                        style={{ width: `${Math.min(100, (subtotal / shippingThreshold) * 100)}%` }}\n                        data-testid=\"progress-free-shipping\"\n                      ></div>\n                    </div>\n                  </div>\n                )}\n                <div className=\"border-t pt-3\">\n                  <div className=\"flex justify-between text-xl font-bold\">\n                    <span data-testid=\"text-total-label\">Total</span>\n                    <span data-testid=\"text-total-amount\">₹{total.toFixed(2)}</span>\n                  </div>\n                </div>\n              </div>\n\n              <Button \n                onClick={handleCheckout}\n                className=\"w-full bg-primary text-white py-4 rounded-full font-semibold text-lg hover:bg-primary/90\"\n                data-testid=\"button-checkout\"\n              >\n                Proceed to Checkout\n              </Button>\n              \n              <Button \n                variant=\"outline\"\n                onClick={() => setLocation(\"/products\")}\n                className=\"w-full mt-3\"\n                data-testid=\"button-continue-shopping-summary\"\n              >\n                Continue Shopping\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12645},"client/src/pages/checkout.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\nconst checkoutSchema = z.object({\n  email: z.string().email(\"Please enter a valid email\"),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  phone: z.string().min(10, \"Please enter a valid phone number\"),\n  address: z.string().min(1, \"Address is required\"),\n  city: z.string().min(1, \"City is required\"),\n  state: z.string().min(1, \"State is required\"),\n  pincode: z.string().min(6, \"Please enter a valid pincode\"),\n  paymentMethod: z.string().min(1, \"Please select a payment method\"),\n  notes: z.string().optional(),\n});\n\ntype CheckoutForm = z.infer<typeof checkoutSchema>;\n\nexport default function Checkout() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const { data: cartItems = [], isLoading } = useQuery({\n    queryKey: [\"/api/cart\"],\n    retry: false,\n    enabled: !!user,\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useForm<CheckoutForm>({\n    resolver: zodResolver(checkoutSchema),\n    defaultValues: {\n      email: user?.email || \"\",\n      firstName: user?.firstName || \"\",\n      lastName: user?.lastName || \"\",\n    },\n  });\n\n  const createOrderMutation = useMutation({\n    mutationFn: async (orderData: any) => {\n      return await apiRequest(\"POST\", \"/api/orders\", orderData);\n    },\n    onSuccess: (response) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Order Placed Successfully!\",\n        description: \"Your order has been confirmed. You will receive an email confirmation shortly.\",\n      });\n      setLocation(`/profile?tab=orders`);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Order Failed\",\n        description: \"Failed to place order. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CheckoutForm) => {\n    if (cartItems.length === 0) {\n      toast({\n        title: \"Empty Cart\",\n        description: \"Your cart is empty. Add items to proceed.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const orderItems = cartItems.map((item: any) => ({\n      productId: item.productId,\n      quantity: item.quantity,\n      size: item.size,\n      color: item.color,\n      price: item.product?.salePrice || item.product?.price,\n    }));\n\n    const shippingAddress = {\n      firstName: data.firstName,\n      lastName: data.lastName,\n      email: data.email,\n      phone: data.phone,\n      address: data.address,\n      city: data.city,\n      state: data.state,\n      pincode: data.pincode,\n    };\n\n    createOrderMutation.mutate({\n      totalAmount: total.toFixed(2),\n      shippingAddress,\n      billingAddress: shippingAddress,\n      paymentMethod: data.paymentMethod,\n      notes: data.notes,\n      items: orderItems,\n    });\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8 text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">Please Login</h1>\n          <p className=\"text-gray-600 mb-6\">You need to login to checkout</p>\n          <Button onClick={() => window.location.href = \"/api/login\"}>\n            Login\n          </Button>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-48 mb-8\"></div>\n            <div className=\"grid lg:grid-cols-2 gap-8\">\n              <div className=\"space-y-4\">\n                {Array.from({ length: 6 }).map((_, i) => (\n                  <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n                ))}\n              </div>\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const subtotal = cartItems.reduce((total: number, item: any) => {\n    return total + (parseFloat(item.product?.salePrice || item.product?.price || \"0\") * item.quantity);\n  }, 0);\n\n  const shippingCost = subtotal >= 1000 ? 0 : 100;\n  const tax = subtotal * 0.18; // 18% GST\n  const total = subtotal + shippingCost + tax;\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8 text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">Your cart is empty</h1>\n          <p className=\"text-gray-600 mb-6\">Add items to your cart to proceed with checkout</p>\n          <Button onClick={() => setLocation(\"/products\")}>\n            Continue Shopping\n          </Button>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-8\" data-testid=\"text-checkout-title\">Checkout</h1>\n        \n        <form onSubmit={handleSubmit(onSubmit)}>\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Checkout Form */}\n            <div className=\"space-y-6\">\n              {/* Contact Information */}\n              <div className=\"bg-white p-6 rounded-xl shadow-md\">\n                <h2 className=\"text-xl font-bold mb-4\" data-testid=\"text-contact-info-title\">Contact Information</h2>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      {...register(\"email\")}\n                      placeholder=\"your@email.com\"\n                      data-testid=\"input-email\"\n                    />\n                    {errors.email && (\n                      <p className=\"text-red-500 text-sm mt-1\" data-testid=\"error-email\">{errors.email.message}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        {...register(\"firstName\")}\n                        placeholder=\"First name\"\n                        data-testid=\"input-first-name\"\n                      />\n                      {errors.firstName && (\n                        <p className=\"text-red-500 text-sm mt-1\" data-testid=\"error-first-name\">{errors.firstName.message}</p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        {...register(\"lastName\")}\n                        placeholder=\"Last name\"\n                        data-testid=\"input-last-name\"\n                      />\n                      {errors.lastName && (\n                        <p className=\"text-red-500 text-sm mt-1\" data-testid=\"error-last-name\">{errors.lastName.message}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      {...register(\"phone\")}\n                      placeholder=\"10-digit phone number\"\n                      data-testid=\"input-phone\"\n                    />\n                    {errors.phone && (\n                      <p className=\"text-red-500 text-sm mt-1\" data-testid=\"error-phone\">{errors.phone.message}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Shipping Address */}\n              <div className=\"bg-white p-6 rounded-xl shadow-md\">\n                <h2 className=\"text-xl font-bold mb-4\" data-testid=\"text-shipping-address-title\">Shipping Address</h2>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"address\">Address</Label>\n                    <Textarea\n                      id=\"address\"\n                      {...register(\"address\")}\n                      placeholder=\"Street address, apartment, suite, etc.\"\n                      data-testid=\"textarea-address\"\n                    />\n                    {errors.address && (\n                      <p className=\"text-red-500 text-sm mt-1\" data-testid=\"error-address\">{errors.address.message}</p>\n                    )}\n                  </div>\n                  \n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"city\">City</Label>\n                      <Input\n                        id=\"city\"\n                        {...register(\"city\")}\n                        placeholder=\"City\"\n                        data-testid=\"input-city\"\n                      />\n                      {errors.city && (\n                        <p className=\"text-red-500 text-sm mt-1\" data-testid=\"error-city\">{errors.city.message}</p>\n                      )}\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"state\">State</Label>\n                      <Input\n                        id=\"state\"\n                        {...register(\"state\")}\n                        placeholder=\"State\"\n                        data-testid=\"input-state\"\n                      />\n                      {errors.state && (\n                        <p className=\"text-red-500 text-sm mt-1\" data-testid=\"error-state\">{errors.state.message}</p>\n                      )}\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"pincode\">Pincode</Label>\n                    <Input\n                      id=\"pincode\"\n                      {...register(\"pincode\")}\n                      placeholder=\"6-digit pincode\"\n                      data-testid=\"input-pincode\"\n                    />\n                    {errors.pincode && (\n                      <p className=\"text-red-500 text-sm mt-1\" data-testid=\"error-pincode\">{errors.pincode.message}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Payment Method */}\n              <div className=\"bg-white p-6 rounded-xl shadow-md\">\n                <h2 className=\"text-xl font-bold mb-4\" data-testid=\"text-payment-method-title\">Payment Method</h2>\n                \n                <div className=\"space-y-4\">\n                  <Select onValueChange={(value) => setValue(\"paymentMethod\", value)}>\n                    <SelectTrigger data-testid=\"select-payment-method\">\n                      <SelectValue placeholder=\"Select payment method\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"cod\">Cash on Delivery</SelectItem>\n                      <SelectItem value=\"card\">Credit/Debit Card</SelectItem>\n                      <SelectItem value=\"upi\">UPI</SelectItem>\n                      <SelectItem value=\"netbanking\">Net Banking</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {errors.paymentMethod && (\n                    <p className=\"text-red-500 text-sm mt-1\" data-testid=\"error-payment-method\">{errors.paymentMethod.message}</p>\n                  )}\n                </div>\n              </div>\n\n              {/* Order Notes */}\n              <div className=\"bg-white p-6 rounded-xl shadow-md\">\n                <h2 className=\"text-xl font-bold mb-4\" data-testid=\"text-order-notes-title\">Order Notes (Optional)</h2>\n                \n                <Textarea\n                  {...register(\"notes\")}\n                  placeholder=\"Any special instructions for your order...\"\n                  data-testid=\"textarea-order-notes\"\n                />\n              </div>\n            </div>\n\n            {/* Order Summary */}\n            <div>\n              <div className=\"bg-white p-6 rounded-xl shadow-md sticky top-24\">\n                <h2 className=\"text-xl font-bold mb-6\" data-testid=\"text-order-summary-title\">Order Summary</h2>\n                \n                {/* Order Items */}\n                <div className=\"space-y-4 mb-6\">\n                  {cartItems.map((item: any) => (\n                    <div key={item.id} className=\"flex items-center space-x-4\" data-testid={`order-item-${item.id}`}>\n                      <img\n                        src={item.product?.imageUrl || \"https://images.unsplash.com/photo-1519238263530-99bdd11df2ea?ixlib=rb-4.0.3&auto=format&fit=crop&w=80&h=80\"}\n                        alt={item.product?.name}\n                        className=\"w-16 h-16 object-cover rounded-lg\"\n                        data-testid={`img-order-item-${item.id}`}\n                      />\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-medium\" data-testid={`text-order-item-name-${item.id}`}>\n                          {item.product?.name}\n                        </h3>\n                        <div className=\"text-sm text-gray-600\">\n                          {item.size && <span data-testid={`text-order-item-size-${item.id}`}>Size: {item.size}</span>}\n                          {item.color && <span className=\"ml-2\" data-testid={`text-order-item-color-${item.id}`}>Color: {item.color}</span>}\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-500\" data-testid={`text-order-item-quantity-${item.id}`}>\n                            Qty: {item.quantity}\n                          </span>\n                          <span className=\"font-semibold\" data-testid={`text-order-item-total-${item.id}`}>\n                            ₹{(parseFloat(item.product?.salePrice || item.product?.price || \"0\") * item.quantity).toFixed(2)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Price Breakdown */}\n                <div className=\"space-y-3 border-t pt-4\">\n                  <div className=\"flex justify-between\">\n                    <span data-testid=\"text-order-subtotal-label\">Subtotal</span>\n                    <span data-testid=\"text-order-subtotal-amount\">₹{subtotal.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span data-testid=\"text-order-shipping-label\">Shipping</span>\n                    <span data-testid=\"text-order-shipping-amount\">\n                      {shippingCost === 0 ? \"Free\" : `₹${shippingCost.toFixed(2)}`}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span data-testid=\"text-order-tax-label\">Tax (18% GST)</span>\n                    <span data-testid=\"text-order-tax-amount\">₹{tax.toFixed(2)}</span>\n                  </div>\n                  <div className=\"border-t pt-3\">\n                    <div className=\"flex justify-between text-xl font-bold\">\n                      <span data-testid=\"text-order-total-label\">Total</span>\n                      <span data-testid=\"text-order-total-amount\">₹{total.toFixed(2)}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Place Order Button */}\n                <Button\n                  type=\"submit\"\n                  disabled={createOrderMutation.isPending}\n                  className=\"w-full mt-6 bg-primary text-white py-4 rounded-full font-semibold text-lg hover:bg-primary/90\"\n                  data-testid=\"button-place-order\"\n                >\n                  {createOrderMutation.isPending ? \"Placing Order...\" : \"Place Order\"}\n                </Button>\n\n                <p className=\"text-xs text-gray-500 text-center mt-4\" data-testid=\"text-order-terms\">\n                  By placing your order, you agree to our terms and conditions and privacy policy.\n                </p>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17848},"client/src/pages/home.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport ProductCard from \"@/components/product-card\";\nimport CartSidebar from \"@/components/cart-sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Product, Category, Slider, SiteSetting } from \"@shared/schema\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const totalSlides = sliders.length || 1;\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: featuredProducts = [], isLoading: featuredLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products/featured\"],\n    retry: false,\n  });\n\n  const { data: saleProducts = [], isLoading: saleLoading } = useQuery<Product[]>({\n    queryKey: [\"/api/products/sale\"],\n    retry: false,\n  });\n\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const { data: sliders = [], isLoading: slidersLoading } = useQuery<Slider[]>({\n    queryKey: [\"/api/sliders\", { placement: \"home\" }],\n    retry: false,\n  });\n\n  const { data: siteSettings = [], isLoading: settingsLoading } = useQuery<SiteSetting[]>({\n    queryKey: [\"/api/site-settings\", { category: \"home\" }],\n    retry: false,\n  });\n\n  const nextSlide = () => {\n    if (totalSlides > 1) {\n      setCurrentSlide((prev) => (prev + 1) % totalSlides);\n    }\n  };\n\n  const prevSlide = () => {\n    if (totalSlides > 1) {\n      setCurrentSlide((prev) => (prev - 1 + totalSlides) % totalSlides);\n    }\n  };\n\n  const goToSlide = (index: number) => {\n    setCurrentSlide(index);\n  };\n\n  // Auto-play slider\n  useEffect(() => {\n    if (totalSlides > 1) {\n      const interval = setInterval(nextSlide, 4000);\n      return () => clearInterval(interval);\n    }\n  }, [totalSlides]);\n\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Header />\n      \n      {/* Dynamic Sliders */}\n      {sliders.length > 0 && (\n        <section className=\"relative w-full h-[400px] md:h-[500px] overflow-hidden\">\n          <div className=\"slider-container relative w-full h-full\">\n            {sliders.map((slider, index) => (\n              <div \n                key={slider.id}\n                className={`slide absolute inset-0 w-full h-full transition-transform duration-500 ${\n                  index === currentSlide ? 'translate-x-0' : \n                  index < currentSlide ? '-translate-x-full' : 'translate-x-full'\n                }`}\n                style={{\n                  backgroundImage: `linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url(${slider.imageUrl})`,\n                  backgroundSize: 'cover',\n                  backgroundPosition: 'center'\n                }}\n              >\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white text-center p-6\">\n                  <h1 className=\"text-4xl md:text-6xl font-black mb-4 tracking-wide\">{slider.title}</h1>\n                  {slider.description && (\n                    <p className=\"text-lg md:text-xl font-medium mb-6 max-w-2xl\">{slider.description}</p>\n                  )}\n                  {slider.linkUrl && slider.buttonText && (\n                    <a \n                      href={slider.linkUrl}\n                      className=\"bg-white text-black px-8 py-3 rounded-lg font-semibold text-lg hover:bg-gray-100 transition-colors\"\n                      data-testid={`slider-button-${slider.id}`}\n                    >\n                      {slider.buttonText}\n                    </a>\n                  )}\n                </div>\n              </div>\n            ))}\n            \n            {/* Slider Controls */}\n            {sliders.length > 1 && (\n              <>\n                <button \n                  onClick={prevSlide} \n                  className=\"absolute left-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-all\"\n                  data-testid=\"slider-prev\"\n                >\n                  ←\n                </button>\n                <button \n                  onClick={nextSlide} \n                  className=\"absolute right-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-full hover:bg-opacity-70 transition-all\"\n                  data-testid=\"slider-next\"\n                >\n                  →\n                </button>\n                \n                {/* Slider Dots */}\n                <div className=\"absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n                  {sliders.map((_, index) => (\n                    <button\n                      key={index}\n                      onClick={() => goToSlide(index)}\n                      className={`w-3 h-3 rounded-full transition-all ${\n                        index === currentSlide ? 'bg-white' : 'bg-white bg-opacity-50'\n                      }`}\n                      data-testid={`slider-dot-${index}`}\n                    />\n                  ))}\n                </div>\n              </>\n            )}\n          </div>\n        </section>\n      )}\n\n\n      {/* Promotional Banner */}\n      <section className=\"py-4 px-4 bg-white\">\n        <div className=\"container mx-auto\">\n          <div className=\"bg-gradient-to-r from-yellow-400 to-orange-400 rounded-xl p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-2xl\">🎉</span>\n                <div>\n                  <h2 className=\"text-xl font-bold text-white\" data-testid=\"hero-title\">GET 10% CASHBACK</h2>\n                  <p className=\"text-white opacity-90 text-sm\" data-testid=\"hero-subtitle\">ON ALL ORDERS</p>\n                </div>\n              </div>\n              <div className=\"bg-yellow-400 px-4 py-2 rounded-full\">\n                <span className=\"font-bold text-gray-800 text-sm\" data-testid=\"promo-code\">USE CODE GETCASH10</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Banner Grid */}\n      <section className=\"py-8 px-4 bg-white\">\n        <div className=\"container mx-auto\">\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {/* Main Banner */}\n            <div className=\"md:col-span-2 relative bg-gradient-to-r from-purple-400 to-pink-400 rounded-2xl overflow-hidden h-64\">\n              <div className=\"absolute inset-0 flex items-center justify-between p-8\">\n                <div className=\"text-white\">\n                  <h3 className=\"text-2xl font-bold mb-2\" data-testid=\"text-casual-title\">BUY 2</h3>\n                  <p className=\"text-4xl font-extrabold mb-2\" data-testid=\"text-offer\">OVERSIZED T-SHIRTS</p>\n                  <p className=\"text-2xl font-bold mb-4\" data-testid=\"text-price\">AT ₹999</p>\n                  <button className=\"bg-white text-purple-600 px-6 py-2 rounded-full font-bold hover:shadow-lg transition-all\" data-testid=\"button-shop-casual\">\n                    Shop Now\n                  </button>\n                </div>\n                <div className=\"hidden md:block\">\n                  <img src=\"https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=200\" alt=\"T-shirts\" className=\"rounded-lg\" />\n                </div>\n              </div>\n            </div>\n            \n            {/* Side Banner */}\n            <div className=\"relative bg-gradient-to-b from-blue-400 to-cyan-400 rounded-2xl overflow-hidden h-64\">\n              <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white p-6 text-center\">\n                <h3 className=\"text-2xl font-bold mb-2\" data-testid=\"text-formal-title\">BUY 3</h3>\n                <p className=\"text-xl font-bold mb-2\" data-testid=\"text-formal-subtitle\">CLASSIC FIT T-SHIRTS</p>\n                <p className=\"text-2xl font-bold mb-4\" data-testid=\"text-formal-price\">AT ₹999</p>\n                <button className=\"bg-white text-blue-600 px-6 py-2 rounded-full font-bold hover:shadow-lg transition-all\" data-testid=\"button-explore-formal\">\n                  Explore\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* New Arrivals Section */}\n      <section className=\"py-8 px-4 bg-gray-50\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-2xl font-bold text-gray-800 mb-2\" data-testid=\"text-categories-title\">NEW ARRIVALS</h2>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n            {categoriesLoading ? (\n              Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"bg-white rounded-lg overflow-hidden animate-pulse\">\n                  <div className=\"w-full h-64 bg-gray-200\"></div>\n                  <div className=\"p-3\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                  </div>\n                </div>\n              ))\n            ) : categories.length > 0 ? (\n              categories.slice(0, 5).map((category: any) => (\n                <div key={category.id} className=\"bg-white rounded-lg overflow-hidden group cursor-pointer hover:shadow-lg transition-all\" data-testid={`category-${category.slug}`}>\n                  <div className=\"relative overflow-hidden\">\n                    <img \n                      src={category.imageUrl || \"https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=400\"} \n                      alt={category.name} \n                      className=\"w-full h-64 object-cover group-hover:scale-105 transition-transform duration-300\"\n                      data-testid={`img-category-${category.slug}`}\n                    />\n                    <div className=\"absolute top-2 left-2\">\n                      <span className=\"bg-yellow-400 text-xs font-bold px-2 py-1 rounded\">4.5 ★</span>\n                    </div>\n                  </div>\n                  <div className=\"p-3\">\n                    <h3 className=\"font-medium text-gray-800 text-sm mb-1\" data-testid={`text-category-name-${category.slug}`}>{category.name}</h3>\n                    <p className=\"text-gray-500 text-xs\">Starting from ₹999</p>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-12\">\n                <p className=\"text-gray-500 text-lg\" data-testid=\"text-no-categories\">No categories available</p>\n              </div>\n            )}\n          </div>\n          <div className=\"text-center mt-8\">\n            <button className=\"text-primary font-bold hover:underline\" data-testid=\"button-explore-all\">\n              Explore All\n            </button>\n          </div>\n        </div>\n      </section>\n\n      {/* Trending Categories */}\n      <section className=\"py-8 px-4 bg-white\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h2 className=\"text-2xl font-bold text-gray-800 mb-2\" data-testid=\"text-sale-title\">TRENDING CATEGORIES</h2>\n          </div>\n          \n          <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4\">\n            {saleLoading ? (\n              Array.from({ length: 6 }).map((_, i) => (\n                <div key={i} className=\"relative aspect-square rounded-lg overflow-hidden animate-pulse\">\n                  <div className=\"w-full h-full bg-gray-200\"></div>\n                </div>\n              ))\n            ) : saleProducts.length > 0 ? (\n              saleProducts.slice(0, 6).map((product: any) => (\n                <div key={product.id} className=\"relative aspect-square rounded-lg overflow-hidden group cursor-pointer\">\n                  <img \n                    src={product.imageUrl || \"https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\"} \n                    alt={product.name} \n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                  <div className=\"absolute inset-0 bg-black bg-opacity-30 flex items-end p-4\">\n                    <h3 className=\"text-white font-bold text-sm\">{product.name || 'Category'}</h3>\n                  </div>\n                </div>\n              ))\n            ) : (\n              Array.from({ length: 6 }).map((_, i) => (\n                <div key={i} className=\"relative aspect-square rounded-lg overflow-hidden group cursor-pointer\">\n                  <img \n                    src={`https://images.unsplash.com/photo-150345453719${5 + i}?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300`} \n                    alt=\"Category\" \n                    className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                  <div className=\"absolute inset-0 bg-black bg-opacity-30 flex items-end p-4\">\n                    <h3 className=\"text-white font-bold text-sm\">Fashion Category</h3>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-16 px-4 bg-white\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-800 mb-4\" data-testid=\"text-featured-title\">Featured Products</h2>\n            <p className=\"text-gray-600\" data-testid=\"text-featured-description\">Hand-picked favorites for your little ones</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {featuredLoading ? (\n              Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"bg-white rounded-xl shadow-md overflow-hidden animate-pulse\">\n                  <div className=\"w-full h-64 bg-gray-200\"></div>\n                  <div className=\"p-4\">\n                    <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                    <div className=\"h-8 bg-gray-200 rounded\"></div>\n                  </div>\n                </div>\n              ))\n            ) : featuredProducts.length > 0 ? (\n              featuredProducts.map((product: any) => (\n                <ProductCard key={product.id} product={product} />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-12\">\n                <p className=\"text-gray-500 text-lg\" data-testid=\"text-no-featured-products\">No featured products available at the moment</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-16 px-4 bg-gray-100\">\n        <div className=\"container mx-auto\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\" data-testid=\"text-testimonials-title\">Happy Parents, Happy Kids</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-white p-6 rounded-xl shadow-md\" data-testid=\"testimonial-1\">\n              <div className=\"star-rating mb-4 text-warning\">\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n              </div>\n              <p className=\"text-gray-600 mb-4\" data-testid=\"text-testimonial-1\">\"Amazing quality and my daughter loves her new outfits! The fabric is so soft and comfortable.\"</p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center text-white font-bold\">P</div>\n                <div className=\"ml-3\">\n                  <h4 className=\"font-semibold\" data-testid=\"text-reviewer-name-1\">Priya Sharma</h4>\n                  <p className=\"text-gray-500 text-sm\" data-testid=\"text-reviewer-status-1\">Verified Buyer</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white p-6 rounded-xl shadow-md\" data-testid=\"testimonial-2\">\n              <div className=\"star-rating mb-4 text-warning\">\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n              </div>\n              <p className=\"text-gray-600 mb-4\" data-testid=\"text-testimonial-2\">\"Fast delivery and excellent customer service. The sizes are accurate and the colors are vibrant.\"</p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-secondary rounded-full flex items-center justify-center text-white font-bold\">R</div>\n                <div className=\"ml-3\">\n                  <h4 className=\"font-semibold\" data-testid=\"text-reviewer-name-2\">Rajesh Kumar</h4>\n                  <p className=\"text-gray-500 text-sm\" data-testid=\"text-reviewer-status-2\">Verified Buyer</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white p-6 rounded-xl shadow-md\" data-testid=\"testimonial-3\">\n              <div className=\"star-rating mb-4 text-warning\">\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n              </div>\n              <p className=\"text-gray-600 mb-4\" data-testid=\"text-testimonial-3\">\"Bought multiple items for my twin boys. Great value for money and they look adorable!\"</p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center text-white font-bold\">A</div>\n                <div className=\"ml-3\">\n                  <h4 className=\"font-semibold\" data-testid=\"text-reviewer-name-3\">Anita Patel</h4>\n                  <p className=\"text-gray-500 text-sm\" data-testid=\"text-reviewer-status-3\">Verified Buyer</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n      <CartSidebar />\n    </div>\n  );\n}\n","size_bytes":19685},"client/src/pages/landing.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport ProductCard from \"@/components/product-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Product, Category } from \"@shared/schema\";\n\nexport default function Landing() {\n  const { toast } = useToast();\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const totalSlides = 2;\n\n  const { data: featuredProducts = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products/featured\"],\n    retry: false,\n  });\n\n  const { data: saleProducts = [] } = useQuery<Product[]>({\n    queryKey: [\"/api/products/sale\"],\n    retry: false,\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % totalSlides);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide((prev) => (prev - 1 + totalSlides) % totalSlides);\n  };\n\n  const goToSlide = (index: number) => {\n    setCurrentSlide(index);\n  };\n\n  // Auto-play slider\n  useEffect(() => {\n    const interval = setInterval(nextSlide, 4000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Update slide transforms\n  useEffect(() => {\n    const slides = document.querySelectorAll('.slide');\n    slides.forEach((slide, index) => {\n      const slideElement = slide as HTMLElement;\n      if (index === currentSlide) {\n        slideElement.style.transform = 'translateX(0%)';\n      } else if (index < currentSlide) {\n        slideElement.style.transform = 'translateX(-100%)';\n      } else {\n        slideElement.style.transform = 'translateX(100%)';\n      }\n    });\n\n    // Update dots\n    const dots = document.querySelectorAll('.dot');\n    dots.forEach((dot, index) => {\n      if (index === currentSlide) {\n        dot.classList.add('opacity-100');\n        dot.classList.remove('opacity-50');\n      } else {\n        dot.classList.add('opacity-50');\n        dot.classList.remove('opacity-100');\n      }\n    });\n  }, [currentSlide]);\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <Header />\n      \n      {/* Full Width 3-Column Slider */}\n      <section className=\"relative w-full h-[400px] md:h-[500px] overflow-hidden\">\n        <div className=\"slider-container relative w-full h-full\">\n          {/* Slide 1: Set A - DENIM, T-SHIRTS, AI */}\n          <div className=\"slide active absolute inset-0 w-full h-full transition-transform duration-500\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 md:gap-4 h-full\">\n              {/* Column 1: DENIM VERSE */}\n              <div className=\"relative overflow-hidden bg-cover bg-center\" style={{backgroundImage: 'linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url(\"https://images.unsplash.com/photo-1542272604-787c3835535d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\")'}}>\n                <div className=\"absolute bottom-6 left-6 text-white z-20\">\n                  <h2 className=\"text-2xl md:text-3xl font-black mb-1 tracking-wide\">DENIM VERSE</h2>\n                  <p className=\"text-sm md:text-base font-medium\">A FIT FOR EVERY YOU</p>\n                </div>\n              </div>\n\n              {/* Column 2: BUY 2 OVERSIZED T-SHIRTS */}\n              <div className=\"relative bg-gradient-to-br from-orange-400 via-red-400 to-red-500\">\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white text-center p-4\">\n                  <div className=\"mb-4\">\n                    <img \n                      src=\"https://images.unsplash.com/photo-1521572163474-6864f9cf17ab?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=120\" \n                      alt=\"T-shirts\" \n                      className=\"w-32 md:w-40 h-20 md:h-24 object-cover rounded-lg shadow-lg mx-auto\"\n                    />\n                  </div>\n                  <h2 className=\"text-2xl md:text-3xl font-black mb-1\">BUY 2</h2>\n                  <h3 className=\"text-lg md:text-xl font-black mb-2\">OVERSIZED T-SHIRTS</h3>\n                  <p className=\"text-xl md:text-2xl font-black\">AT ₹999</p>\n                </div>\n              </div>\n\n              {/* Column 3: Design Your Tee with GOOGLE AI */}\n              <div className=\"relative overflow-hidden bg-cover bg-center\" style={{backgroundImage: 'linear-gradient(rgba(0,0,0,0.2), rgba(0,0,0,0.4)), url(\"https://images.unsplash.com/photo-1446776877081-d282a0f896e2?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\")'}}>\n                <div className=\"absolute top-4 left-4 z-20\">\n                  <span className=\"bg-yellow-400 text-black px-3 py-1 rounded-full text-xs font-bold\">\n                    BEWAKOOF® x 🌍\n                  </span>\n                </div>\n                <div className=\"absolute bottom-6 left-6 text-white z-20\">\n                  <h2 className=\"text-xl md:text-2xl font-black mb-1\">Design Your Tee with</h2>\n                  <h3 className=\"text-lg md:text-xl font-black mb-2 text-yellow-400\">GOOGLE AI</h3>\n                  <p className=\"text-xs md:text-sm font-medium\">Experience Endless Imagination</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Slide 2: Set B - SUMMER, HOODIES, ACCESSORIES */}\n          <div className=\"slide absolute inset-0 w-full h-full translate-x-full transition-transform duration-500\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 md:gap-4 h-full\">\n              {/* Column 1: SUMMER COLLECTION */}\n              <div className=\"relative overflow-hidden bg-cover bg-center\" style={{backgroundImage: 'linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url(\"https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\")'}}>\n                <div className=\"absolute bottom-6 left-6 text-white z-20\">\n                  <h2 className=\"text-2xl md:text-3xl font-black mb-1 tracking-wide\">SUMMER VIBES</h2>\n                  <p className=\"text-sm md:text-base font-medium\">COOL & COMFORTABLE</p>\n                </div>\n              </div>\n\n              {/* Column 2: HOODIES COLLECTION */}\n              <div className=\"relative bg-gradient-to-br from-blue-500 via-indigo-500 to-purple-600\">\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white text-center p-4\">\n                  <div className=\"mb-4\">\n                    <img \n                      src=\"https://images.unsplash.com/photo-1556821840-3a9fbc2abd3c?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=120\" \n                      alt=\"Hoodies\" \n                      className=\"w-32 md:w-40 h-20 md:h-24 object-cover rounded-lg shadow-lg mx-auto\"\n                    />\n                  </div>\n                  <h2 className=\"text-2xl md:text-3xl font-black mb-1\">COZY</h2>\n                  <h3 className=\"text-lg md:text-xl font-black mb-2\">HOODIES</h3>\n                  <p className=\"text-xl md:text-2xl font-black\">FROM ₹1299</p>\n                </div>\n              </div>\n\n              {/* Column 3: ACCESSORIES */}\n              <div className=\"relative overflow-hidden bg-cover bg-center\" style={{backgroundImage: 'linear-gradient(rgba(0,0,0,0.4), rgba(0,0,0,0.4)), url(\"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=800\")'}}>\n                <div className=\"absolute bottom-6 left-6 text-white z-20\">\n                  <h2 className=\"text-xl md:text-2xl font-black mb-1\">STYLISH</h2>\n                  <h3 className=\"text-lg md:text-xl font-black mb-2 text-yellow-400\">ACCESSORIES</h3>\n                  <p className=\"text-xs md:text-sm font-medium\">Complete Your Look</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation Dots */}\n          <div className=\"absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-3 z-30\">\n            <button onClick={() => goToSlide(0)} className=\"dot w-3 h-3 rounded-full bg-white opacity-50 hover:opacity-100 transition-opacity\"></button>\n            <button onClick={() => goToSlide(1)} className=\"dot w-3 h-3 rounded-full bg-white opacity-50 hover:opacity-100 transition-opacity\"></button>\n          </div>\n\n          {/* Navigation Arrows */}\n          <button onClick={prevSlide} className=\"prev-arrow absolute left-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-30 text-white p-3 rounded-full hover:bg-opacity-50 transition-all z-30\">\n            ←\n          </button>\n          <button onClick={nextSlide} className=\"next-arrow absolute right-4 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-30 text-white p-3 rounded-full hover:bg-opacity-50 transition-all z-30\">\n            →\n          </button>\n        </div>\n      </section>\n\n      {/* Promotional Banners */}\n      <section className=\"py-12 px-4\">\n        <div className=\"container mx-auto\">\n          <div className=\"grid md:grid-cols-2 gap-6 mb-12\">\n            <div className=\"relative overflow-hidden rounded-2xl\">\n              <img \n                src=\"https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                alt=\"Kids in colorful casual wear\" \n                className=\"w-full h-64 object-cover\"\n                data-testid=\"img-casual-collection\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-r from-black/60 to-transparent flex items-center\">\n                <div className=\"text-white p-8\">\n                  <h3 className=\"text-2xl font-bold mb-2\" data-testid=\"text-casual-title\">Casual Collection</h3>\n                  <p className=\"mb-4\" data-testid=\"text-casual-description\">Comfortable everyday wear</p>\n                  <Button \n                    onClick={handleLogin}\n                    className=\"bg-primary text-white px-6 py-2 rounded-full font-medium hover:bg-primary/90\"\n                    data-testid=\"button-shop-casual\"\n                  >\n                    Shop Now\n                  </Button>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"relative overflow-hidden rounded-2xl\">\n              <img \n                src=\"https://images.unsplash.com/photo-1519457431-44ccd64a579b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=400\" \n                alt=\"Kids in formal attire\" \n                className=\"w-full h-64 object-cover\"\n                data-testid=\"img-formal-collection\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-r from-black/60 to-transparent flex items-center\">\n                <div className=\"text-white p-8\">\n                  <h3 className=\"text-2xl font-bold mb-2\" data-testid=\"text-formal-title\">Formal Wear</h3>\n                  <p className=\"mb-4\" data-testid=\"text-formal-description\">Special occasion outfits</p>\n                  <Button \n                    onClick={handleLogin}\n                    className=\"bg-secondary text-white px-6 py-2 rounded-full font-medium hover:bg-secondary/90\"\n                    data-testid=\"button-explore-formal\"\n                  >\n                    Explore\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Product Categories */}\n      <section className=\"py-12 px-4 bg-white\">\n        <div className=\"container mx-auto\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\" data-testid=\"text-categories-title\">Shop by Category</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {categories.length > 0 ? (\n              categories.slice(0, 4).map((category) => (\n                <div key={category.id} className=\"text-center group cursor-pointer\" data-testid={`category-${category.slug}`}>\n                  <div className=\"w-32 h-32 mx-auto mb-4 rounded-full overflow-hidden group-hover:scale-105 transition-transform\">\n                    <img \n                      src={category.imageUrl || \"https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\"} \n                      alt={category.name} \n                      className=\"w-full h-full object-cover\"\n                      data-testid={`img-category-${category.slug}`}\n                    />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-800\" data-testid={`text-category-name-${category.slug}`}>{category.name}</h3>\n                </div>\n              ))\n            ) : (\n              // Default categories when no data\n              <>\n                <div className=\"text-center group cursor-pointer\" data-testid=\"category-clothing-sets\">\n                  <div className=\"w-32 h-32 mx-auto mb-4 rounded-full overflow-hidden group-hover:scale-105 transition-transform\">\n                    <img \n                      src=\"https://images.unsplash.com/photo-1503454537195-1dcabb73ffb9?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\" \n                      alt=\"Kids clothing sets\" \n                      className=\"w-full h-full object-cover\"\n                      data-testid=\"img-category-clothing-sets\"\n                    />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-800\" data-testid=\"text-category-name-clothing-sets\">Clothing Sets</h3>\n                </div>\n                \n                <div className=\"text-center group cursor-pointer\" data-testid=\"category-baby-collection\">\n                  <div className=\"w-32 h-32 mx-auto mb-4 rounded-full overflow-hidden group-hover:scale-105 transition-transform\">\n                    <img \n                      src=\"https://images.unsplash.com/photo-1607522370275-f14206abe5d3?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\" \n                      alt=\"Baby accessories\" \n                      className=\"w-full h-full object-cover\"\n                      data-testid=\"img-category-baby-collection\"\n                    />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-800\" data-testid=\"text-category-name-baby-collection\">Baby Collection</h3>\n                </div>\n                \n                <div className=\"text-center group cursor-pointer\" data-testid=\"category-casual-wear\">\n                  <div className=\"w-32 h-32 mx-auto mb-4 rounded-full overflow-hidden group-hover:scale-105 transition-transform\">\n                    <img \n                      src=\"https://images.unsplash.com/photo-1519238263530-99bdd11df2ea?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\" \n                      alt=\"Kids casual wear\" \n                      className=\"w-full h-full object-cover\"\n                      data-testid=\"img-category-casual-wear\"\n                    />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-800\" data-testid=\"text-category-name-casual-wear\">Casual Wear</h3>\n                </div>\n                \n                <div className=\"text-center group cursor-pointer\" data-testid=\"category-accessories\">\n                  <div className=\"w-32 h-32 mx-auto mb-4 rounded-full overflow-hidden group-hover:scale-105 transition-transform\">\n                    <img \n                      src=\"https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\" \n                      alt=\"Kids accessories\" \n                      className=\"w-full h-full object-cover\"\n                      data-testid=\"img-category-accessories\"\n                    />\n                  </div>\n                  <h3 className=\"font-semibold text-gray-800\" data-testid=\"text-category-name-accessories\">Accessories</h3>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Sale Section */}\n      <section className=\"py-16 px-4 bg-gradient-to-r from-warning/20 to-primary/20\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-800 mb-4\" data-testid=\"text-sale-title\">Flash Sale - Up to 50% Off!</h2>\n            <p className=\"text-gray-600\" data-testid=\"text-sale-description\">Limited time offer on selected items</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {saleProducts.length > 0 ? (\n              saleProducts.map((product) => (\n                <ProductCard key={product.id} product={product} showLogin={handleLogin} />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-12\">\n                <p className=\"text-gray-500 text-lg\" data-testid=\"text-no-sale-products\">No sale products available at the moment</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Products */}\n      <section className=\"py-16 px-4 bg-white\">\n        <div className=\"container mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-800 mb-4\" data-testid=\"text-featured-title\">Featured Products</h2>\n            <p className=\"text-gray-600\" data-testid=\"text-featured-description\">Hand-picked favorites for your little ones</p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {featuredProducts.length > 0 ? (\n              featuredProducts.map((product) => (\n                <ProductCard key={product.id} product={product} showLogin={handleLogin} />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-12\">\n                <p className=\"text-gray-500 text-lg\" data-testid=\"text-no-featured-products\">No featured products available at the moment</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section className=\"py-16 px-4 bg-gray-100\">\n        <div className=\"container mx-auto\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\" data-testid=\"text-testimonials-title\">Happy Parents, Happy Kids</h2>\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"bg-white p-6 rounded-xl shadow-md\" data-testid=\"testimonial-1\">\n              <div className=\"star-rating mb-4 text-warning\">\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n              </div>\n              <p className=\"text-gray-600 mb-4\" data-testid=\"text-testimonial-1\">\"Amazing quality and my daughter loves her new outfits! The fabric is so soft and comfortable.\"</p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center text-white font-bold\">P</div>\n                <div className=\"ml-3\">\n                  <h4 className=\"font-semibold\" data-testid=\"text-reviewer-name-1\">Priya Sharma</h4>\n                  <p className=\"text-gray-500 text-sm\" data-testid=\"text-reviewer-status-1\">Verified Buyer</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white p-6 rounded-xl shadow-md\" data-testid=\"testimonial-2\">\n              <div className=\"star-rating mb-4 text-warning\">\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n              </div>\n              <p className=\"text-gray-600 mb-4\" data-testid=\"text-testimonial-2\">\"Fast delivery and excellent customer service. The sizes are accurate and the colors are vibrant.\"</p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-secondary rounded-full flex items-center justify-center text-white font-bold\">R</div>\n                <div className=\"ml-3\">\n                  <h4 className=\"font-semibold\" data-testid=\"text-reviewer-name-2\">Rajesh Kumar</h4>\n                  <p className=\"text-gray-500 text-sm\" data-testid=\"text-reviewer-status-2\">Verified Buyer</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white p-6 rounded-xl shadow-md\" data-testid=\"testimonial-3\">\n              <div className=\"star-rating mb-4 text-warning\">\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n                <i className=\"fas fa-star\"></i>\n              </div>\n              <p className=\"text-gray-600 mb-4\" data-testid=\"text-testimonial-3\">\"Bought multiple items for my twin boys. Great value for money and they look adorable!\"</p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-accent rounded-full flex items-center justify-center text-white font-bold\">A</div>\n                <div className=\"ml-3\">\n                  <h4 className=\"font-semibold\" data-testid=\"text-reviewer-name-3\">Anita Patel</h4>\n                  <p className=\"text-gray-500 text-sm\" data-testid=\"text-reviewer-status-3\">Verified Buyer</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":21823},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Login failed\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"Logged in successfully!\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to login\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/20 via-secondary/20 to-accent/20 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <CardTitle className=\"text-2xl font-bold text-primary\">Welcome Back!</CardTitle>\n          <CardDescription>\n            Sign in to your account to continue shopping\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"Enter your email\"\n                        {...field}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        {...field}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Don't have an account?{\" \"}\n              <Link href=\"/register\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-register\">\n                Sign up here\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4718},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/product-detail.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport CartSidebar from \"@/components/cart-sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function ProductDetail() {\n  const { slug } = useParams();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [selectedSize, setSelectedSize] = useState(\"\");\n  const [selectedColor, setSelectedColor] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [activeImage, setActiveImage] = useState(0);\n  const [showReviewForm, setShowReviewForm] = useState(false);\n  const [reviewData, setReviewData] = useState({ rating: 5, title: \"\", comment: \"\" });\n\n  const { data: product, isLoading } = useQuery({\n    queryKey: [\"/api/products\", slug],\n    retry: false,\n  });\n\n  const { data: reviews = [] } = useQuery({\n    queryKey: [\"/api/products\", product?.id, \"reviews\"],\n    enabled: !!product?.id,\n    retry: false,\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async (cartData: any) => {\n      await apiRequest(\"POST\", \"/api/cart\", cartData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Added to Cart\",\n        description: \"Product has been added to your cart!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to cart\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const addToWishlistMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      await apiRequest(\"POST\", \"/api/wishlist\", { productId });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Added to Wishlist\",\n        description: \"Product has been added to your wishlist!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to wishlist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createReviewMutation = useMutation({\n    mutationFn: async (reviewData: any) => {\n      await apiRequest(\"POST\", `/api/products/${product?.id}/reviews`, reviewData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/products\", product?.id, \"reviews\"] });\n      setShowReviewForm(false);\n      setReviewData({ rating: 5, title: \"\", comment: \"\" });\n      toast({\n        title: \"Review Submitted\",\n        description: \"Thank you for your review!\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit review\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddToCart = () => {\n    if (!user) {\n      toast({\n        title: \"Please Login\",\n        description: \"You need to login to add items to cart\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (product?.sizes && product.sizes.length > 0 && !selectedSize) {\n      toast({\n        title: \"Select Size\",\n        description: \"Please select a size\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addToCartMutation.mutate({\n      productId: product?.id,\n      quantity,\n      size: selectedSize || null,\n      color: selectedColor || null,\n    });\n  };\n\n  const handleAddToWishlist = () => {\n    if (!user) {\n      toast({\n        title: \"Please Login\",\n        description: \"You need to login to add items to wishlist\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addToWishlistMutation.mutate(product?.id);\n  };\n\n  const handleSubmitReview = () => {\n    if (!user) {\n      toast({\n        title: \"Please Login\",\n        description: \"You need to login to submit a review\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createReviewMutation.mutate(reviewData);\n  };\n\n  const displayPrice = product?.salePrice || product?.price;\n  const originalPrice = product?.salePrice ? product?.price : null;\n  const discountPercent = originalPrice \n    ? Math.round(((parseFloat(originalPrice) - parseFloat(displayPrice)) / parseFloat(originalPrice)) * 100)\n    : 0;\n\n  const images = product?.images && product.images.length > 0 \n    ? product.images \n    : [product?.imageUrl || \"https://images.unsplash.com/photo-1519238263530-99bdd11df2ea?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\"];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"grid md:grid-cols-2 gap-8 animate-pulse\">\n            <div className=\"space-y-4\">\n              <div className=\"w-full h-96 bg-gray-200 rounded-xl\"></div>\n              <div className=\"grid grid-cols-4 gap-2\">\n                {Array.from({ length: 4 }).map((_, i) => (\n                  <div key={i} className=\"w-full h-20 bg-gray-200 rounded-lg\"></div>\n                ))}\n              </div>\n            </div>\n            <div className=\"space-y-4\">\n              <div className=\"h-8 bg-gray-200 rounded\"></div>\n              <div className=\"h-6 bg-gray-200 rounded w-32\"></div>\n              <div className=\"h-10 bg-gray-200 rounded w-40\"></div>\n              <div className=\"h-24 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!product) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-8 text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">Product Not Found</h1>\n          <p className=\"text-gray-600\">The product you're looking for doesn't exist.</p>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid md:grid-cols-2 gap-8 mb-12\">\n          {/* Product Images */}\n          <div>\n            <div className=\"mb-4\">\n              <img \n                src={images[activeImage]} \n                alt={product.name}\n                className=\"w-full h-96 object-cover rounded-xl\"\n                data-testid=\"img-product-main\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 gap-2\">\n              {images.map((image: string, index: number) => (\n                <img\n                  key={index}\n                  src={image}\n                  alt={`${product.name} ${index + 1}`}\n                  className={`w-full h-20 object-cover rounded-lg cursor-pointer border-2 ${\n                    activeImage === index ? \"border-primary\" : \"border-gray-200\"\n                  }`}\n                  onClick={() => setActiveImage(index)}\n                  data-testid={`img-thumbnail-${index}`}\n                />\n              ))}\n            </div>\n          </div>\n\n          {/* Product Details */}\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-800 mb-4\" data-testid=\"text-product-name\">{product.name}</h1>\n            \n            <div className=\"flex items-center mb-4\">\n              <div className=\"star-rating text-warning mr-2\">\n                {Array.from({ length: 5 }, (_, i) => (\n                  <i key={i} className={`${i < Math.floor(parseFloat(product.rating || \"0\")) ? \"fas\" : \"far\"} fa-star`}></i>\n                ))}\n              </div>\n              <span className=\"text-gray-500 text-sm\" data-testid=\"text-review-count\">({product.reviewCount} reviews)</span>\n            </div>\n\n            <div className=\"mb-6\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-3xl font-bold text-primary\" data-testid=\"text-price\">₹{displayPrice}</span>\n                {originalPrice && (\n                  <>\n                    <span className=\"text-gray-500 line-through text-xl\" data-testid=\"text-original-price\">₹{originalPrice}</span>\n                    <Badge variant=\"destructive\" data-testid=\"badge-discount\">{discountPercent}% OFF</Badge>\n                  </>\n                )}\n              </div>\n            </div>\n\n            {product.shortDescription && (\n              <p className=\"text-gray-600 mb-6\" data-testid=\"text-product-description\">{product.shortDescription}</p>\n            )}\n\n            {/* Size Selection */}\n            {product.sizes && product.sizes.length > 0 && (\n              <div className=\"mb-6\">\n                <h4 className=\"font-semibold mb-2\">Select Size/Age:</h4>\n                <Select value={selectedSize} onValueChange={setSelectedSize}>\n                  <SelectTrigger className=\"w-full\" data-testid=\"select-size\">\n                    <SelectValue placeholder=\"Choose size\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {product.sizes.map((size: string) => (\n                      <SelectItem key={size} value={size}>{size}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Color Selection */}\n            {product.colors && product.colors.length > 0 && (\n              <div className=\"mb-6\">\n                <h4 className=\"font-semibold mb-2\">Select Color:</h4>\n                <Select value={selectedColor} onValueChange={setSelectedColor}>\n                  <SelectTrigger className=\"w-full\" data-testid=\"select-color\">\n                    <SelectValue placeholder=\"Choose color\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {product.colors.map((color: string) => (\n                      <SelectItem key={color} value={color}>{color}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {/* Quantity */}\n            <div className=\"mb-6\">\n              <h4 className=\"font-semibold mb-2\">Quantity:</h4>\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                  data-testid=\"button-decrease-quantity\"\n                >\n                  -\n                </Button>\n                <span className=\"text-lg font-medium\" data-testid=\"text-quantity\">{quantity}</span>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setQuantity(quantity + 1)}\n                  data-testid=\"button-increase-quantity\"\n                >\n                  +\n                </Button>\n              </div>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"space-y-3 mb-6\">\n              <Button\n                onClick={handleAddToCart}\n                disabled={addToCartMutation.isPending}\n                className=\"w-full bg-primary text-white py-4 rounded-full font-semibold text-lg hover:bg-primary/90\"\n                data-testid=\"button-add-to-cart\"\n              >\n                {addToCartMutation.isPending ? \"Adding...\" : \"Add to Cart\"}\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={handleAddToWishlist}\n                disabled={addToWishlistMutation.isPending}\n                className=\"w-full py-3 rounded-full font-medium\"\n                data-testid=\"button-add-to-wishlist\"\n              >\n                {addToWishlistMutation.isPending ? \"Adding...\" : \"Add to Wishlist\"}\n              </Button>\n            </div>\n\n            {/* Product Features */}\n            <div className=\"text-sm text-gray-600 space-y-1\">\n              <p data-testid=\"text-shipping-info\"><i className=\"fas fa-truck mr-2\"></i>Free shipping on orders above ₹1000</p>\n              <p data-testid=\"text-return-policy\"><i className=\"fas fa-undo mr-2\"></i>30-day return policy</p>\n              <p data-testid=\"text-quality-guarantee\"><i className=\"fas fa-shield-alt mr-2\"></i>Quality guaranteed</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Product Description */}\n        {product.description && (\n          <div className=\"bg-white p-6 rounded-xl shadow-md mb-8\">\n            <h3 className=\"text-xl font-bold mb-4\" data-testid=\"text-description-title\">Product Description</h3>\n            <p className=\"text-gray-600 leading-relaxed\" data-testid=\"text-full-description\">{product.description}</p>\n          </div>\n        )}\n\n        {/* Reviews Section */}\n        <div className=\"bg-white p-6 rounded-xl shadow-md\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-bold\" data-testid=\"text-reviews-title\">Customer Reviews</h3>\n            {user && (\n              <Button \n                onClick={() => setShowReviewForm(!showReviewForm)}\n                data-testid=\"button-write-review\"\n              >\n                Write a Review\n              </Button>\n            )}\n          </div>\n\n          {/* Review Form */}\n          {showReviewForm && (\n            <div className=\"mb-6 p-4 border rounded-lg\">\n              <h4 className=\"font-semibold mb-4\" data-testid=\"text-review-form-title\">Write Your Review</h4>\n              \n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium mb-2\">Rating</label>\n                <div className=\"flex space-x-1\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <button\n                      key={star}\n                      onClick={() => setReviewData({ ...reviewData, rating: star })}\n                      className={`text-2xl ${star <= reviewData.rating ? \"text-warning\" : \"text-gray-300\"}`}\n                      data-testid={`button-rating-${star}`}\n                    >\n                      <i className=\"fas fa-star\"></i>\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium mb-2\">Title</label>\n                <input\n                  type=\"text\"\n                  value={reviewData.title}\n                  onChange={(e) => setReviewData({ ...reviewData, title: e.target.value })}\n                  className=\"w-full px-3 py-2 border rounded-lg\"\n                  placeholder=\"Review title\"\n                  data-testid=\"input-review-title\"\n                />\n              </div>\n\n              <div className=\"mb-4\">\n                <label className=\"block text-sm font-medium mb-2\">Comment</label>\n                <Textarea\n                  value={reviewData.comment}\n                  onChange={(e) => setReviewData({ ...reviewData, comment: e.target.value })}\n                  placeholder=\"Share your experience...\"\n                  data-testid=\"textarea-review-comment\"\n                />\n              </div>\n\n              <div className=\"flex space-x-2\">\n                <Button \n                  onClick={handleSubmitReview}\n                  disabled={createReviewMutation.isPending}\n                  data-testid=\"button-submit-review\"\n                >\n                  {createReviewMutation.isPending ? \"Submitting...\" : \"Submit Review\"}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowReviewForm(false)}\n                  data-testid=\"button-cancel-review\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Reviews List */}\n          <div className=\"space-y-4\">\n            {reviews.length > 0 ? (\n              reviews.map((review: any, index: number) => (\n                <div key={review.id} className=\"border-b pb-4\" data-testid={`review-${index}`}>\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"star-rating text-warning\">\n                        {Array.from({ length: 5 }, (_, i) => (\n                          <i key={i} className={`${i < review.rating ? \"fas\" : \"far\"} fa-star`}></i>\n                        ))}\n                      </div>\n                      {review.title && <span className=\"font-medium\" data-testid={`text-review-title-${index}`}>{review.title}</span>}\n                    </div>\n                    <span className=\"text-sm text-gray-500\" data-testid={`text-review-date-${index}`}>\n                      {new Date(review.createdAt).toLocaleDateString()}\n                    </span>\n                  </div>\n                  {review.comment && (\n                    <p className=\"text-gray-600\" data-testid={`text-review-comment-${index}`}>{review.comment}</p>\n                  )}\n                </div>\n              ))\n            ) : (\n              <p className=\"text-gray-500 text-center py-8\" data-testid=\"text-no-reviews\">No reviews yet. Be the first to review this product!</p>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n      <CartSidebar />\n    </div>\n  );\n}\n","size_bytes":18780},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Product, Category } from \"@shared/schema\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport ProductCard from \"@/components/product-card\";\nimport CartSidebar from \"@/components/cart-sidebar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Label } from \"@/components/ui/label\";\n\nexport default function Products() {\n  const [filters, setFilters] = useState({\n    search: \"\",\n    categoryId: \"\",\n    minPrice: 0,\n    maxPrice: 5000,\n    isOnSale: false,\n    page: 1,\n  });\n\n  const { data: categories = [] } = useQuery<Category[]>({\n    queryKey: [\"/api/categories\"],\n    retry: false,\n  });\n\n  const { data: productsData, isLoading } = useQuery<{\n    products: Product[];\n    total: number;\n    page: number;\n    limit: number;\n    totalPages: number;\n  }>({\n    queryKey: [\"/api/products\", filters],\n    retry: false,\n  });\n\n  const handleFilterChange = (key: string, value: any) => {\n    setFilters(prev => ({ ...prev, [key]: value, page: 1 }));\n  };\n\n  const handlePriceChange = (value: number[]) => {\n    setFilters(prev => ({ ...prev, minPrice: value[0], maxPrice: value[1] }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      search: \"\",\n      categoryId: \"\",\n      minPrice: 0,\n      maxPrice: 5000,\n      isOnSale: false,\n      page: 1,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Filters Sidebar */}\n          <div className=\"lg:w-1/4\">\n            <div className=\"bg-white p-6 rounded-xl shadow-md\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-lg font-semibold\" data-testid=\"text-filters-title\">Filters</h3>\n                <Button \n                  variant=\"ghost\" \n                  onClick={clearFilters}\n                  className=\"text-sm text-primary\"\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear All\n                </Button>\n              </div>\n\n              {/* Search */}\n              <div className=\"mb-6\">\n                <Label htmlFor=\"search\" className=\"text-sm font-medium mb-2 block\">Search</Label>\n                <Input\n                  id=\"search\"\n                  placeholder=\"Search products...\"\n                  value={filters.search}\n                  onChange={(e) => handleFilterChange(\"search\", e.target.value)}\n                  data-testid=\"input-search\"\n                />\n              </div>\n\n              {/* Category */}\n              <div className=\"mb-6\">\n                <Label className=\"text-sm font-medium mb-2 block\">Category</Label>\n                <Select value={filters.categoryId} onValueChange={(value) => handleFilterChange(\"categoryId\", value)}>\n                  <SelectTrigger data-testid=\"select-category\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">All Categories</SelectItem>\n                    {categories.map((category: any) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Price Range */}\n              <div className=\"mb-6\">\n                <Label className=\"text-sm font-medium mb-2 block\">Price Range</Label>\n                <div className=\"px-2\">\n                  <Slider\n                    value={[filters.minPrice, filters.maxPrice]}\n                    onValueChange={handlePriceChange}\n                    min={0}\n                    max={5000}\n                    step={100}\n                    className=\"mb-4\"\n                    data-testid=\"slider-price\"\n                  />\n                  <div className=\"flex justify-between text-sm text-gray-600\">\n                    <span data-testid=\"text-min-price\">₹{filters.minPrice}</span>\n                    <span data-testid=\"text-max-price\">₹{filters.maxPrice}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Sale Only */}\n              <div className=\"mb-6\">\n                <label className=\"flex items-center space-x-2 cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={filters.isOnSale}\n                    onChange={(e) => handleFilterChange(\"isOnSale\", e.target.checked)}\n                    className=\"rounded border-gray-300\"\n                    data-testid=\"checkbox-sale-only\"\n                  />\n                  <span className=\"text-sm font-medium\">Sale Items Only</span>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {/* Products Grid */}\n          <div className=\"lg:w-3/4\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <h1 className=\"text-2xl font-bold\" data-testid=\"text-products-title\">Products</h1>\n                {productsData && (\n                  <p className=\"text-gray-600\" data-testid=\"text-products-count\">\n                    {productsData.total} products found\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {Array.from({ length: 6 }).map((_, i) => (\n                  <div key={i} className=\"bg-white rounded-xl shadow-md overflow-hidden animate-pulse\">\n                    <div className=\"w-full h-64 bg-gray-200\"></div>\n                    <div className=\"p-4\">\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-6 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-8 bg-gray-200 rounded\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : productsData?.products?.length > 0 ? (\n              <>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n                  {productsData.products.map((product: any) => (\n                    <ProductCard key={product.id} product={product} />\n                  ))}\n                </div>\n\n                {/* Pagination */}\n                {productsData.totalPages > 1 && (\n                  <div className=\"flex justify-center items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => handleFilterChange(\"page\", Math.max(1, filters.page - 1))}\n                      disabled={filters.page === 1}\n                      data-testid=\"button-prev-page\"\n                    >\n                      Previous\n                    </Button>\n                    \n                    <div className=\"flex space-x-1\">\n                      {Array.from({ length: Math.min(5, productsData.totalPages) }, (_, i) => {\n                        const page = i + 1;\n                        return (\n                          <Button\n                            key={page}\n                            variant={filters.page === page ? \"default\" : \"outline\"}\n                            onClick={() => handleFilterChange(\"page\", page)}\n                            className=\"w-10 h-10\"\n                            data-testid={`button-page-${page}`}\n                          >\n                            {page}\n                          </Button>\n                        );\n                      })}\n                    </div>\n\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => handleFilterChange(\"page\", Math.min(productsData.totalPages, filters.page + 1))}\n                      disabled={filters.page === productsData.totalPages}\n                      data-testid=\"button-next-page\"\n                    >\n                      Next\n                    </Button>\n                  </div>\n                )}\n              </>\n            ) : (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-500 text-lg mb-4\" data-testid=\"text-no-products\">No products found</div>\n                <Button onClick={clearFilters} data-testid=\"button-clear-filters-empty\">\n                  Clear Filters\n                </Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n      <CartSidebar />\n    </div>\n  );\n}\n","size_bytes":9013},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Profile() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"profile\");\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!authLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, authLoading, toast]);\n\n  // Check URL params for tab\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const tab = params.get(\"tab\");\n    if (tab) {\n      setActiveTab(tab);\n    }\n  }, []);\n\n  const { data: orders = [], isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    retry: false,\n    enabled: !!user,\n  });\n\n  const { data: wishlistItems = [], isLoading: wishlistLoading } = useQuery({\n    queryKey: [\"/api/wishlist\"],\n    retry: false,\n    enabled: !!user,\n  });\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Redirect is handled in useEffect\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"processing\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"shipped\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"delivered\":\n        return \"bg-green-100 text-green-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-3xl font-bold text-gray-800 mb-8\" data-testid=\"text-profile-title\">My Account</h1>\n          \n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-3\" data-testid=\"tabs-profile\">\n              <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">Profile</TabsTrigger>\n              <TabsTrigger value=\"orders\" data-testid=\"tab-orders\">Orders</TabsTrigger>\n              <TabsTrigger value=\"wishlist\" data-testid=\"tab-wishlist\">Wishlist</TabsTrigger>\n            </TabsList>\n\n            {/* Profile Tab */}\n            <TabsContent value=\"profile\" className=\"space-y-6\">\n              <div className=\"bg-white p-6 rounded-xl shadow-md\">\n                <h2 className=\"text-xl font-bold mb-4\" data-testid=\"text-profile-info-title\">Profile Information</h2>\n                \n                <div className=\"flex items-center space-x-4 mb-6\">\n                  {user.profileImageUrl ? (\n                    <img\n                      src={user.profileImageUrl}\n                      alt=\"Profile\"\n                      className=\"w-16 h-16 rounded-full object-cover\"\n                      data-testid=\"img-profile-picture\"\n                    />\n                  ) : (\n                    <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center text-white font-bold text-2xl\">\n                      {user.firstName?.[0] || user.email?.[0] || \"U\"}\n                    </div>\n                  )}\n                  <div>\n                    <h3 className=\"text-lg font-semibold\" data-testid=\"text-user-name\">\n                      {user.firstName} {user.lastName}\n                    </h3>\n                    <p className=\"text-gray-600\" data-testid=\"text-user-email\">{user.email}</p>\n                  </div>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">First Name</label>\n                    <div className=\"p-3 bg-gray-50 rounded-lg\" data-testid=\"text-first-name\">\n                      {user.firstName || \"Not provided\"}\n                    </div>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Last Name</label>\n                    <div className=\"p-3 bg-gray-50 rounded-lg\" data-testid=\"text-last-name\">\n                      {user.lastName || \"Not provided\"}\n                    </div>\n                  </div>\n                  <div className=\"md:col-span-2\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email</label>\n                    <div className=\"p-3 bg-gray-50 rounded-lg\" data-testid=\"text-email\">\n                      {user.email}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"mt-6 pt-6 border-t\">\n                  <h3 className=\"font-semibold mb-2\">Account Actions</h3>\n                  <Button\n                    onClick={() => window.location.href = \"/api/logout\"}\n                    variant=\"outline\"\n                    data-testid=\"button-logout-profile\"\n                  >\n                    Logout\n                  </Button>\n                </div>\n              </div>\n            </TabsContent>\n\n            {/* Orders Tab */}\n            <TabsContent value=\"orders\" className=\"space-y-6\">\n              <div className=\"bg-white p-6 rounded-xl shadow-md\">\n                <h2 className=\"text-xl font-bold mb-4\" data-testid=\"text-orders-title\">Order History</h2>\n                \n                {ordersLoading ? (\n                  <div className=\"space-y-4\">\n                    {Array.from({ length: 3 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-24 bg-gray-200 rounded-lg\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : orders.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-shopping-bag text-4xl text-gray-300 mb-4\"></i>\n                    <p className=\"text-gray-500 mb-4\" data-testid=\"text-no-orders\">You haven't placed any orders yet</p>\n                    <Button onClick={() => window.location.href = \"/products\"} data-testid=\"button-start-shopping\">\n                      Start Shopping\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {orders.map((order: any) => (\n                      <div key={order.id} className=\"border rounded-lg p-4\" data-testid={`order-${order.id}`}>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div>\n                            <h3 className=\"font-semibold\" data-testid={`text-order-id-${order.id}`}>\n                              Order #{order.id.slice(-8)}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\" data-testid={`text-order-date-${order.id}`}>\n                              {new Date(order.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge className={getStatusColor(order.status)} data-testid={`badge-order-status-${order.id}`}>\n                              {order.status.toUpperCase()}\n                            </Badge>\n                            <p className=\"text-lg font-semibold mt-1\" data-testid={`text-order-total-${order.id}`}>\n                              ₹{order.totalAmount}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-sm text-gray-600\">\n                          <p data-testid={`text-order-payment-${order.id}`}>\n                            Payment: {order.paymentMethod || \"Not specified\"}\n                          </p>\n                          {order.shippingAddress && (\n                            <p data-testid={`text-order-address-${order.id}`}>\n                              Shipping to: {order.shippingAddress.city}, {order.shippingAddress.state}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            {/* Wishlist Tab */}\n            <TabsContent value=\"wishlist\" className=\"space-y-6\">\n              <div className=\"bg-white p-6 rounded-xl shadow-md\">\n                <h2 className=\"text-xl font-bold mb-4\" data-testid=\"text-wishlist-title\">My Wishlist</h2>\n                \n                {wishlistLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {Array.from({ length: 6 }).map((_, i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"w-full h-48 bg-gray-200 rounded-lg mb-2\"></div>\n                        <div className=\"h-4 bg-gray-200 rounded mb-1\"></div>\n                        <div className=\"h-6 bg-gray-200 rounded w-20\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : wishlistItems.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <i className=\"fas fa-heart text-4xl text-gray-300 mb-4\"></i>\n                    <p className=\"text-gray-500 mb-4\" data-testid=\"text-no-wishlist-items\">Your wishlist is empty</p>\n                    <Button onClick={() => window.location.href = \"/products\"} data-testid=\"button-browse-products\">\n                      Browse Products\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {wishlistItems.map((item: any) => (\n                      <div key={item.id} className=\"border rounded-lg overflow-hidden\" data-testid={`wishlist-item-${item.id}`}>\n                        <img\n                          src={item.product?.imageUrl || \"https://images.unsplash.com/photo-1519238263530-99bdd11df2ea?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\"}\n                          alt={item.product?.name}\n                          className=\"w-full h-48 object-cover\"\n                          data-testid={`img-wishlist-item-${item.id}`}\n                        />\n                        <div className=\"p-4\">\n                          <h3 className=\"font-semibold mb-2\" data-testid={`text-wishlist-item-name-${item.id}`}>\n                            {item.product?.name}\n                          </h3>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-lg font-bold text-primary\" data-testid={`text-wishlist-item-price-${item.id}`}>\n                              ₹{item.product?.salePrice || item.product?.price}\n                            </span>\n                            <Button\n                              size=\"sm\"\n                              onClick={() => window.location.href = `/products/${item.product?.slug}`}\n                              data-testid={`button-view-wishlist-item-${item.id}`}\n                            >\n                              View\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12594},"client/src/pages/register.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst registerSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n  acceptTerms: z.boolean().refine(val => val === true, \"You must accept the terms and conditions\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const form = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      acceptTerms: false,\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: Omit<RegisterForm, \"confirmPassword\" | \"acceptTerms\">) => {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || \"Registration failed\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Success\",\n        description: \"Account created successfully! Welcome!\",\n      });\n      setLocation(\"/\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterForm) => {\n    const { confirmPassword, acceptTerms, ...registerData } = data;\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/20 via-secondary/20 to-accent/20 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <CardTitle className=\"text-2xl font-bold text-primary\">Create Account</CardTitle>\n          <CardDescription>\n            Join us and start shopping for your little ones\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"John\"\n                          {...field}\n                          data-testid=\"input-first-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Doe\"\n                          {...field}\n                          data-testid=\"input-last-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"john@example.com\"\n                        {...field}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Create a password\"\n                        {...field}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Confirm your password\"\n                        {...field}\n                        data-testid=\"input-confirm-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"acceptTerms\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"checkbox-terms\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel className=\"text-sm font-normal\">\n                        I accept the{\" \"}\n                        <Link href=\"/terms\" className=\"text-primary hover:underline\">\n                          Terms & Conditions\n                        </Link>{\" \"}\n                        and{\" \"}\n                        <Link href=\"/privacy\" className=\"text-primary hover:underline\">\n                          Privacy Policy\n                        </Link>\n                      </FormLabel>\n                      <FormMessage />\n                    </div>\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n                data-testid=\"button-register\"\n              >\n                {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </Form>\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-primary hover:underline font-medium\" data-testid=\"link-login\">\n                Sign in here\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8632},"client/src/store/cart.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface CartItem {\n  id: string;\n  productId: string;\n  quantity: number;\n  size?: string;\n  color?: string;\n  product?: {\n    id: string;\n    name: string;\n    price: string;\n    salePrice?: string;\n    imageUrl: string;\n  };\n}\n\ninterface CartStore {\n  items: CartItem[];\n  isOpen: boolean;\n  addItem: (item: CartItem) => void;\n  removeItem: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  clearCart: () => void;\n  toggleCart: () => void;\n  setOpen: (open: boolean) => void;\n  getItemCount: () => number;\n  getSubtotal: () => number;\n}\n\nexport const useCartStore = create<CartStore>()(\n  persist(\n    (set, get) => ({\n      items: [],\n      isOpen: false,\n      \n      addItem: (newItem) => {\n        const items = get().items;\n        const existingItemIndex = items.findIndex(\n          item => \n            item.productId === newItem.productId &&\n            item.size === newItem.size &&\n            item.color === newItem.color\n        );\n\n        if (existingItemIndex > -1) {\n          const updatedItems = [...items];\n          updatedItems[existingItemIndex].quantity += newItem.quantity;\n          set({ items: updatedItems });\n        } else {\n          set({ items: [...items, newItem] });\n        }\n      },\n\n      removeItem: (id) => {\n        set({ items: get().items.filter(item => item.id !== id) });\n      },\n\n      updateQuantity: (id, quantity) => {\n        if (quantity <= 0) {\n          get().removeItem(id);\n          return;\n        }\n        \n        set({\n          items: get().items.map(item =>\n            item.id === id ? { ...item, quantity } : item\n          )\n        });\n      },\n\n      clearCart: () => {\n        set({ items: [] });\n      },\n\n      toggleCart: () => {\n        set({ isOpen: !get().isOpen });\n      },\n\n      setOpen: (open) => {\n        set({ isOpen: open });\n      },\n\n      getItemCount: () => {\n        return get().items.reduce((total, item) => total + item.quantity, 0);\n      },\n\n      getSubtotal: () => {\n        return get().items.reduce((total, item) => {\n          const price = parseFloat(item.product?.salePrice || item.product?.price || '0');\n          return total + (price * item.quantity);\n        }, 0);\n      },\n    }),\n    {\n      name: 'vimishe-cart',\n    }\n  )\n);\n","size_bytes":2356},"client/src/stores/useCartStore.ts":{"content":"import { create } from 'zustand';\n\n// Simple cart sidebar store for UI state\ninterface CartSidebarStore {\n  isOpen: boolean;\n  setIsOpen: (isOpen: boolean) => void;\n}\n\nexport const useCartStore = create<CartSidebarStore>((set) => ({\n  isOpen: false,\n  setIsOpen: (isOpen: boolean) => set({ isOpen }),\n}));","size_bytes":305},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298}},"version":1}